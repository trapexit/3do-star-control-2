#include "Portfolio.h"
#include "Init3DO.h"
#include "Parse3DO.h"
#include "Utils3DO.h"
#include "filefunctions.h"
#include "BlockFile.h"

#define WIDTH		210//(chrccb->ccb_Width)
#define HEIGHT		67//(chrccb->ccb_Height)
#define XBANDS		6

#define WRAP_EXTRA	20
#define XLATE_TAB_SIZE	(256)
#define CMAP_SIZE	(3 * 128 + 2)

#define INITIAL_DIRECTORY	"$boot/starcon"

#ifdef DEBUG
#define PRD(s)		printf s
#define SYSERR(e)	PrintfSysErr (e)
#else /* DEBUG */
#define PRD(s)
#define SYSERR(e)
#endif /* DEBUG */

#define NUMBER_OF_SCREENS	2

#define SHADOW_COLOR		(0x18c6) // Shadow color... sleazy

#define PIXC_DUP(v)		(((v) << PPMP_0_SHIFT) | ((v) << PPMP_1_SHIFT))
#define PIXC_UNCODED16		(PIXC_DUP (PPMPC_MF_8 | PPMPC_SF_8))

#define SET_CEL_FLAGS(c,f)	((c)->ccb_Flags |= (f))
#define CLR_CEL_FLAGS(c,f)	((c)->ccb_Flags &= ~(f))

#define CEL_FLAGS \
	(CCB_SPABS | CCB_PPABS | CCB_YOXY | CCB_ACW | CCB_ACCW | CCB_LDSIZE | CCB_CCBPRE \
	| CCB_LDPRS | CCB_LDPPMP | CCB_ACE | CCB_LCE | CCB_PLUTPOS | CCB_BGND)

#define NUM_NORMAL_CELS		1200

#define NUMBER_OF_CLUTVALS	32

#define SCREEN_WIDTH		320
#define SCREEN_HEIGHT		240

typedef struct
{
    int32 	sc_curScreen;
    int32 	sc_nFrameBufferPages;
    int32 	sc_nFrameByteCount;
    Item 	sc_Screens[NUMBER_OF_SCREENS];
    Item	sc_BitmapItems[NUMBER_OF_SCREENS];
    Bitmap	*sc_Bitmaps[NUMBER_OF_SCREENS];
} ourScreenContext;

static ourScreenContext	theScreen;
static Item		theScreenGroup;

static CCB	*cel_array;
static CCB	*cur_ccb, *final_ccb;

static Item	VRAMIOReq;

static void
BlackenScreen (uint32 mask, int32 frame_ct)
{
    int32		i;
    uint32	colorEntries[NUMBER_OF_CLUTVALS], *ce;

    ce = colorEntries;
    for (i = 0; i < NUMBER_OF_CLUTVALS; i++)
	*ce++ = MakeCLUTColorEntry (i, 0, 0, 0);
	
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	if (mask & (1UL << i))
    	    SetScreenColors (theScreen.sc_Screens[i],
 		    colorEntries, NUMBER_OF_CLUTVALS);
    }
	
    SetScreenColor (0, MakeCLUTColorEntry (NUMBER_OF_CLUTVALS, 0, 0, 0));
}

static void
LightenScreen (uint32 mask, int32 frame_ct)
{
    int32		i;
    uint32	colorEntries[NUMBER_OF_CLUTVALS], *ce;

    ce = colorEntries;
    for (i = 0; i < NUMBER_OF_CLUTVALS; i++)
    {
	ubyte	color;
	
	color = (ubyte)((i << 3) | (i >> 2));
	*ce++ = MakeCLUTColorEntry (i, color, color, color);
    }
	
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	if (mask & (1UL << i))
    	    SetScreenColors (theScreen.sc_Screens[i],
 		    colorEntries, NUMBER_OF_CLUTVALS);
    }

// ??????????
    SetScreenColor (0, MakeCLUTColorEntry (NUMBER_OF_CLUTVALS, 0, 0, 0));
}

static bool
ourOpenGraphics (ourScreenContext *sc, Item *gItem, int32 h)
{
    Int32	i, w;
    int32	bmpages, bmsize;
    TagArg	taScreenTags[6], *t;
    void	*bmbuf[MAXSCREENS];
    extern Item	SPORTDevice;

    if (!SPORTDevice)
    {
	if (OpenGraphicsFolio () || !OpenSPORT ())
	{
	    PRD (("Cannot open graphics folio\n"));
	    return FALSE;
	}
    }

    w = SCREEN_WIDTH;
    bmpages = (w * 2 * h
	    + GrafBase->gf_VRAMPageSize - 1) 
	    / GrafBase->gf_VRAMPageSize;
    bmsize = bmpages * GrafBase->gf_VRAMPageSize;

#ifdef ALLOC_SEPARATELY    
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
	bmbuf[i] = 0;
	
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	if (!(bmbuf[i] = AllocMem (bmsize,
		MEMTYPE_VRAM | MEMTYPE_FILL | 0)))
	    goto Failure;
    }
#else
    bmbuf[0] = AllocMem (bmsize * NUMBER_OF_SCREENS,
	    MEMTYPE_VRAM | MEMTYPE_FILL | 0);
    if (!bmbuf[0])
	goto Failure;
    for (i = 1; i < NUMBER_OF_SCREENS; i++)
	bmbuf[i] = (void *)((char *)bmbuf[i - 1] + bmsize);
#endif
	
    t = taScreenTags;
    t->ta_Tag = CSG_TAG_SCREENCOUNT;
    t->ta_Arg = (void *)NUMBER_OF_SCREENS;
    t++;
    t->ta_Tag = CSG_TAG_BITMAPCOUNT;
    t->ta_Arg = (void *)NUMBER_OF_SCREENS;
    t++;
    t->ta_Tag = CSG_TAG_BITMAPBUF_ARRAY;
    t->ta_Arg = (void *)bmbuf;
    t++;
    t->ta_Tag = CSG_TAG_BITMAPWIDTH_ARRAY;
    t->ta_Arg = (void *)&w;
    t++;
    t->ta_Tag = CSG_TAG_BITMAPHEIGHT_ARRAY;
    t->ta_Arg = (void *)&h;
    t++;
    t->ta_Tag = CSG_TAG_DONE;
	
    *gItem = CreateScreenGroup (&(sc->sc_Screens[0]), taScreenTags);
    if (*gItem < 0)
    {
	PRD (("Cannot create screen group"));
	SYSERR (*gItem);
	goto Failure;
    }
    
    AddScreenGroup (*gItem, NULL);

    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	Screen	*screen;
	
	if ((screen = (Screen *)LookupItem (sc->sc_Screens[i])) == NULL) 
	{
	    PRD (("%d: Cannot locate screen\n", i));
	    goto Failure;
	}
	
	sc->sc_BitmapItems[i] = screen->scr_TempBitmap->bm.n_Item;
	sc->sc_Bitmaps[i] = screen->scr_TempBitmap;
	EnableHAVG (sc->sc_Screens[i]);
	EnableVAVG (sc->sc_Screens[i]);
    }

    sc->sc_nFrameBufferPages = bmpages;
    sc->sc_nFrameByteCount = bmsize;
    sc->sc_curScreen = 0;

    return TRUE;
    
Failure:
#ifdef ALLOC_SEPARATELY
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	if (bmbuf[i])
	    FreeMem (bmbuf[i], bmsize);
    }
#else
    if (bmbuf[0])
	FreeMem (bmbuf[0], bmsize * NUMBER_OF_SCREENS);
#endif
    
    return FALSE;
}

static void
ourCloseGraphics (ourScreenContext *sc, Item sgItem)
{
    int32		i;
    int32	errorCode;

    if ((errorCode = RemoveScreenGroup (sgItem)) < 0)
    {
	PRD (("RemoveScreenGroup failed -- "));
	SYSERR (errorCode);
    }

    if ((errorCode = DeleteItem (sgItem)) < 0)
    {
	PRD (("DeleteScreenGroup failed -- "));
	SYSERR (errorCode);
    }
    
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	Screen	*screen;
		
	screen = (Screen *)LookupItem (sc->sc_Screens[i]);
	if ((errorCode = DeleteItem (screen->scr_VDLItem)) < 0)		
	{
	    PRD (("%d: DeleteItem of VDL failed -- ", i));
	    SYSERR (errorCode);
	}
    }

#ifdef ALLOC_SEPARATELY
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	FreeMem (sc->sc_Bitmaps[i]->bm_Buffer, sc->sc_nFrameByteCount);
	bmbuf[i] = 0;
    }
#else
    FreeMem (sc->sc_Bitmaps[0]->bm_Buffer,
	    sc->sc_nFrameByteCount * NUMBER_OF_SCREENS);
#endif
	
    for (i = 0; i < NUMBER_OF_SCREENS; i++)
    {
	if ((errorCode = DeleteItem (sc->sc_BitmapItems[i])) < 0)
	{
	    PRD (("%d: DeleteItem of Bitmap failed -- ", i));
	    SYSERR (errorCode);
	}
	if ((errorCode = DeleteItem (sc->sc_Screens[i])) < 0)
	{
	    PRD (("%d: DeleteItem of Screen failed -- ", i));
	    SYSERR (errorCode);
	}
    }

    ScavengeMem (); // necessary after FreeMem to return memory to system
}

int32
Init3DO (void)
{
    if (ourOpenGraphics (&theScreen, &theScreenGroup, SCREEN_HEIGHT))
    {
	int32	i;

	if (ChangeDirectory (INITIAL_DIRECTORY) < 0)
	    return (0);

	if (!VRAMIOReq)
	    VRAMIOReq = GetVRAMIOReq ();

	if (!cel_array
		&& !(cel_array = (CCB *)AllocMem (
			sizeof (CCB) * NUM_NORMAL_CELS,
			MEMTYPE_ANY | MEMTYPE_FILL | 0)))
	    return (0);

	for (cur_ccb = &cel_array[0], i = NUM_NORMAL_CELS;
		i > 0; i--, cur_ccb++)
	{
	    cur_ccb->ccb_Flags = CEL_FLAGS;
	    cur_ccb->ccb_NextPtr = (CCB *)MakeCCBRelative (&cur_ccb->ccb_NextPtr, cur_ccb + 1);
	}
	
	cur_ccb = &cel_array[0];
	final_ccb = &cel_array[NUM_NORMAL_CELS - 1];
	
	for (i = 0; i < NUMBER_OF_SCREENS; i++)
	{
	    SetCEControl (theScreen.sc_BitmapItems[i],
		    B15POS_PDC | CFBDLSB_CFBD0 | PDCLSB_PDC0,
		    B15POS_MASK | CFBDLSB_MASK | PDCLSB_MASK);

	    SetVRAMPages (VRAMIOReq, theScreen.sc_Bitmaps[i]->bm_Buffer,
		    0, theScreen.sc_nFrameBufferPages, ~0);
	}

	BlackenScreen ((1UL << 0) | (1UL << 1), 0);
	DisplayScreen (theScreen.sc_Screens[theScreen.sc_curScreen], 0);
	LightenScreen ((1UL << 0) | (1UL << 1), 0);

	return (1);
    }
	
    return (0);
}

void
Uninit3DO (void)
{
    theScreen.sc_curScreen = !theScreen.sc_curScreen;
    SetVRAMPages (VRAMIOReq,
	    theScreen.sc_Bitmaps[theScreen.sc_curScreen]->bm_Buffer,
	    0, theScreen.sc_nFrameBufferPages, ~0);

    DisplayScreen (theScreen.sc_Screens[theScreen.sc_curScreen], 0);
    BlackenScreen (1UL << theScreen.sc_curScreen, 0);
    
    if (cel_array)
    {
	FreeMem (cel_array, sizeof (CCB) * NUM_NORMAL_CELS);
	cel_array = 0;
    }

    if (VRAMIOReq)
    {
	DeleteItem (VRAMIOReq);
	VRAMIOReq = 0;
    }

    if (theScreenGroup)
    {
	ourCloseGraphics (&theScreen, theScreenGroup);
	theScreenGroup = 0;
    }
}

void
batch_cels (int32 flush)
{
    Item	BitmapItem;
    CCB		*last_ccb;

    BitmapItem = theScreen.sc_BitmapItems[!theScreen.sc_curScreen];
	
    if (cur_ccb != &cel_array[0])
    {
	last_ccb = --cur_ccb;
	SET_CEL_FLAGS (last_ccb, CCB_LAST);
	cur_ccb = &cel_array[0];

	DrawCels (BitmapItem, (CCB *)cel_array);

	CLR_CEL_FLAGS (last_ccb, CCB_LAST);
    }

    if (flush)
    {
	theScreen.sc_curScreen = !theScreen.sc_curScreen;
	DisplayScreen (theScreen.sc_Screens[theScreen.sc_curScreen], 0);
    }
}

#if 0
void
blt_cel (CCB *ccb, int32 x, int32 y, int32 w, int32 h, Point *pt)
{
    if (cur_ccb == final_ccb)
	batch_cels (0);
	
    *cur_ccb = *ccb;
    CLR_CEL_FLAGS (cur_ccb, CCB_NPABS | CCB_LAST);
    SET_CEL_FLAGS (cur_ccb, CCB_PPABS | CCB_ACE | CCB_LCE);
    cur_ccb->ccb_NextPtr = (CCB *)MakeCCBRelative (&cur_ccb->ccb_NextPtr, cur_ccb + 1);

    if (!h)
    {
	cur_ccb->ccb_PIXC = PIXC_DUP (0x85c2UL);
	SET_CEL_FLAGS (cur_ccb, CCB_USEAV);
	if (pt)
	    myMapCel (cur_ccb, pt);
	else
	{
	    cur_ccb->ccb_XPos = x;
	    cur_ccb->ccb_YPos = y;
	}
	cur_ccb++;

	return;
    }

    cur_ccb->ccb_SourcePtr = (CelData *)((int32 *)cur_ccb->ccb_SourcePtr
	    + y * (((WIDTH + WRAP_EXTRA + 3) & ~3) >> 1) + (x >> 1));
    cur_ccb->ccb_PRE0 &= ~PRE0_VCNT_MASK;
    cur_ccb->ccb_PRE1 &= ~PRE1_TLHPCNT_MASK;
    cur_ccb->ccb_PRE0 |= (h - PRE0_VCNT_PREFETCH) << PRE0_VCNT_SHIFT;
    cur_ccb->ccb_PRE1 |= (w - PRE1_TLHPCNT_PREFETCH) << PRE1_TLHPCNT_SHIFT;

    cur_ccb->ccb_Width = w;
    cur_ccb->ccb_Height = h;

    myMapCel (cur_ccb, pt);

    cur_ccb++;
}

static int32	x0[30], x1[30], y0[30], y1[30];
static ubyte	ystep[30];

static void
build_steps ()
{
    int32	y, i, c, inc;

    c = 1;
    inc = 1;
    y = 0;
    for (i = 0; y < (HEIGHT >> 1); ++i)
    {
	ystep[i] = (ubyte)c;
	y += c;
	if (y > (HEIGHT >> 2) && inc == 1)
	{
	    y -= c;
	    ystep[i] = (ubyte)((HEIGHT >> 1) - (y << 1));
	    if (ystep[i] == 0)
		--i;
	    else
		y += ystep[i];
	    
	    inc = -1;
	}
	c += inc;
    }

    ystep[i] = 1;
    
#if 0
y = 0;
for (i = 0; y < (HEIGHT >> 1); i++)
{
    printf ("ystep[%d] = %d\n", i, ystep[i]);
    y += ystep[i];
}
#endif
}

static void
build_tables (int32 da)
{
    int32	y, src_h, i;

    build_steps ();
    
    for (y = 0, i = 0; y <= (HEIGHT >> 1); y += ystep[i], i++)
    {
	int32	dx, dy, a;

	src_h = ystep[i];	

	if (y + src_h > (HEIGHT >> 1)
		&& (src_h = (HEIGHT >> 1) - y + 1) == 0)
	    return;

	dy = (HEIGHT >> 1) - y;
	dx = SqrtF16 (((HEIGHT >> 1) * (HEIGHT >> 1) - dy * dy) << 16);
	dy <<= 16;

	a = Atan2F16 (-dx, -dy);
	a += da << 16;
	x0[i] = HEIGHT * CosF16 (a);
	y0[i] = HEIGHT * SinF16 (a);
	a = Atan2F16 (dx, -dy);
	a += da << 16;
	x1[i] = HEIGHT * CosF16 (a);
	y1[i] = HEIGHT * SinF16 (a);
	
	x0[i] >>= 1;
	y0[i] >>= 1;
	x1[i] >>= 1;
	y1[i] >>= 1;
#if 0
printf ("%d: %d  ", i, y);
printf ("%d,%d -- ", x0[i] >> 16, y0[i] >> 16);
printf ("%d,%d\n", x1[i] >> 16, y1[i] >> 16);
#endif
    }
}

static void
draw_band (CCB *chrccb, int32 src_x, int32 src_y,
	int32 src_ws[], int32 src_h, int32 dst_cx, int32 dst_cy, int32 band)
{
    int32	i, dst_x0, dst_y0, dst_x1, dst_y1, dx0, dy0, dx1, dy1;

    if (src_y > (HEIGHT >> 1))
    {
	if (src_y + src_h > HEIGHT
		&& (src_h = HEIGHT - src_y + 1) == 0)
	    return;
	dx0 = x1[band + 1];
	dy0 = y1[band + 1];
	dx1 = x1[band];
	dy1 = y1[band];
	dst_x0 = dst_cx - dx0;
	dst_y0 = dst_cy - dy0;
	dst_x1 = dst_cx - dx1;
	dst_y1 = dst_cy - dy1;
	dx0 -= x0[band + 1];
	dy0 -= y0[band + 1];
	dx1 -= x0[band];
	dy1 -= y0[band];
    }
    else
    {
	if (src_y + src_h > (HEIGHT >> 1)
		&& (src_h = (HEIGHT >> 1) - src_y + 1) == 0)
	    return;
	dx0 = x0[band];
	dy0 = y0[band];
	dx1 = x0[band + 1];
	dy1 = y0[band + 1];
	dst_x0 = dst_cx + dx0;
	dst_y0 = dst_cy + dy0;
	dst_x1 = dst_cx + dx1;
	dst_y1 = dst_cy + dy1;
	dx0 = x1[band] - dx0;
	dy0 = y1[band] - dy0;
	dx1 = x1[band + 1] - dx1;
	dy1 = y1[band + 1] - dy1;
    }

    for (i = 0; i < XBANDS; i++)
    {
#define dd	d[i]
	Point	quadpts[4];
	int32	d[XBANDS] = { 17, 47, 64, 64, 47, 17 };

	quadpts[0].pt_X = dst_x0;
	quadpts[0].pt_Y = dst_y0;
	quadpts[3].pt_X = dst_x1;
	quadpts[3].pt_Y = dst_y1;

	dst_x0 += (dx0 * dd) >> 8;
	dst_y0 += (dy0 * dd) >> 8;
	dst_x1 += (dx1 * dd) >> 8;
	dst_y1 += (dy1 * dd) >> 8;

	quadpts[1].pt_X = dst_x0;
	quadpts[1].pt_Y = dst_y0;
	quadpts[2].pt_X = dst_x1;
	quadpts[2].pt_Y = dst_y1;

	blt_cel (chrccb,
		src_x,
		src_y,
		src_ws[i],
		src_h,
		quadpts);

	src_x += src_ws[i];
	if (src_x >= WIDTH)
	    src_x -= WIDTH;
	else if (src_x < 0)
	    src_x += WIDTH;
    }
}

static char *
load_elevations (Stream *fp)
{
    char	*data, *p;
    int32	linebytes, ct;

    linebytes = (WIDTH + WRAP_EXTRA + 3) & ~3;
    if (!(data = (char *)AllocMem (linebytes * HEIGHT, MEMTYPE_ANY)))
	return (0);
	
    p = data;
    ct = HEIGHT;
    do
    {
	ReadDiskStream (fp, p, WIDTH);
#if WRAP_EXTRA
	memcpy (p + WIDTH, p, WRAP_EXTRA);
#endif
	p += linebytes;
    } while (--ct);
	
    return (data);
}

static char *
load_xlat_tab (char *file)
{
    Stream	*fp;
    char	*data;
    
    data = 0;
    if (fp = OpenDiskStream (file, 0))
    {
#define XLATE_TAB_HDR	20
	SeekDiskStream (fp, XLATE_TAB_HDR, SEEK_SET);
	data = (char *)AllocMem (XLATE_TAB_SIZE, MEMTYPE_ANY);
	ReadDiskStream (fp, data, XLATE_TAB_SIZE);
	CloseDiskStream (fp);
#if 0
{
    int	i;
    
    printf ("xlate: \n");
    for (i = 0; i < XLATE_TAB_SIZE; i++)
    {
	printf ("%d ", data[i]);
	if (i % 16 == 15)
	    printf ("\n");
    }
}
#endif
    }
    
    return (data);
}

static char *
load_cmap (char *file)
{
    Stream	*fp;
    char	*data;
    
    data = 0;
    if (fp = OpenDiskStream (file, 0))
    {
#define CMAP_HDR	22
	SeekDiskStream (fp, CMAP_HDR, SEEK_SET);
	data = (char *)AllocMem (CMAP_SIZE * 3, MEMTYPE_ANY);
	ReadDiskStream (fp, data, CMAP_SIZE * 3);
	CloseDiskStream (fp);
	
#if 0
{
    int	i;
    char	*p;
    
    p = data + CMAP_SIZE * 2;
    
    printf ("cmap: (%d -- %d)\n", p[0], p[1]);
    
    for (i = 0; i < 128; i++)
    {
	int	j;
	
	j = (i * 3) + 2;
	printf ("%d: ", i);
	printf ("%d %d %d\n", p[j], p[j + 1], p[j + 2]);
    }
}
#endif
    }
    
    return (data);
}

typedef struct
{
    char	*elev;
    char	*trans;
    char	*cmap;
    int32	*image;
} PLANET;

static int32
xlate_topography (PLANET *planet)
{
    int32	x, y;
    int32	linebytes;
    char	*elevp, *cm_ptr;
    int32	*image, *imagep;

    linebytes = (WIDTH + WRAP_EXTRA + 3) & ~3;
    image = (int32 *)AllocMem ((linebytes * HEIGHT) << 1, MEMTYPE_ANY);
    if (!image)
	return (0);
	
    imagep = image;
    elevp = planet->elev;
    cm_ptr = &planet->cmap[CMAP_SIZE * 0];
    for (y = 0; y < HEIGHT; y++)
    {
	char	*ep;
	int32	*ip;
	
	ep = elevp;
	ip = imagep;
	for (x = 0; x < linebytes; x += 2)
	{
	    int32	hi, lo;
	    char	*cp;
	    
	    hi = planet->trans[*ep++];
	    cp = &cm_ptr[(hi - 128) * 3 + 2];
	    hi = (int32)(((*cp >> 1) << 10) | ((*(cp + 1) >> 1) << 5) | (*(cp + 2) >> 1));
	    lo = planet->trans[*ep++];
	    cp = &cm_ptr[(lo - 128) * 3 + 2];
	    lo = (int32)(((*cp >> 1) << 10) | ((*(cp + 1) >> 1) << 5) | (*(cp + 2) >> 1));
	    *ip++ = ((hi << 16) | lo) & ~0x80008000;
	}
	
	elevp += linebytes;
	imagep += (linebytes >> 1);
    }
    
    planet->image = image;
    
    return (1);
}

static int32
load_planet (char *file, PLANET *planet, int32 ss_index, int32 pl_index, int32 mn_index, char *xlt, char *cmap)
{
    Stream	*fp;
    int32	retval;
    
    retval = 0;
    if (fp = OpenDiskStream (file, 0))
    {
	long	pl_offs;

	SeekDiskStream (fp, ss_index * sizeof (long), SEEK_SET);
	ReadDiskStream (fp, (char *)&pl_offs, sizeof (pl_offs));
	SeekDiskStream (fp, pl_offs + pl_index * sizeof (long), SEEK_SET);
	ReadDiskStream (fp, (char *)&pl_offs, sizeof (pl_offs));
	SeekDiskStream (fp, pl_offs + mn_index * (WIDTH * HEIGHT), SEEK_SET);
	
	if ((planet->elev = load_elevations (fp))
		&& (planet->trans = load_xlat_tab (xlt))
		&& (planet->cmap = load_cmap (cmap)))
	{
	    if (xlate_topography (planet))
		retval = 1;
	}
	
	CloseDiskStream (fp);
    }
    
    return (retval);
}
#endif

int
main (int32 argc, char **argv)
{
#define ONE_SECOND	(audio_rate)
    long	chrsize, lumsize;
    void	*chrbuf, *lumbuf;
    int32	i, x, da, y, src_w[XBANDS];
    int32	dst_cx, dst_cy;
    long	start_time, audio_rate;
    CCB		*chrccb, *lumccb, ccb;
    char	celfile[80], lumfile[80];
    int32	incr;
    PLANET	planet;
int32	ticks, ct;

ticks = ct = 0;
    if (!Init3DO ())
	exit (0);

    OpenMathFolio ();
    OpenAudioFolio ();
    audio_rate = GetAudioRate () >> 16;

    strcpy (celfile, "earth.chr");
    strcpy (lumfile, "earth.lum");
    da = 0;
    incr = 1;

    --argc;
    ++argv;

start_time = GetAudioTime ();    
    load_planet ("planet.dat", &planet,
	    atoi (*argv), atoi (*(argv + 1)), atoi (*(argv + 2)),
	    *(argv + 3), *(argv + 4));
printf ("loading and building planet took %ld ticks\n", GetAudioTime () - start_time);

    if (argc > 5)
    {
	char	*s;
	
	s = *(argv + 5);
	if ((*s >= '0' && *s <= '9')
		|| *s == '-')
	{
	    if (*s == '-')
		incr = -1;
	    da = atoi (s);
	}
    }
    
    chrccb = &ccb;
    ccb.ccb_Flags = CEL_FLAGS;
    ccb.ccb_Width = WIDTH + WRAP_EXTRA;
    ccb.ccb_Height = HEIGHT;
    ccb.ccb_PRE0 =
	    PRE0_BGND
	    | ((HEIGHT - PRE0_VCNT_PREFETCH) << PRE0_VCNT_SHIFT)
	    | PRE0_LINEAR
	    | PRE0_BPP_16;
    ccb.ccb_PRE1 =
	    PRE1_TLLSB_PDC0
	    | ((WIDTH + WRAP_EXTRA - PRE1_TLHPCNT_PREFETCH) << PRE1_TLHPCNT_SHIFT)
	    | (((((WIDTH + WRAP_EXTRA + 3) & ~3) >> 1) - PRE1_WOFFSET_PREFETCH) << PRE1_WOFFSET10_SHIFT);
    ccb.ccb_SourcePtr = (CelData *)planet.image;
    ccb.ccb_PIXC = PIXC_UNCODED16;

    if (lumbuf = LoadFile ("dog2.lum", &lumsize, MEMTYPE_ANY))
	lumccb = ParseCel (lumbuf, lumsize);
    else
	lumccb = 0;

{
    Point	pt[4];
    
    pt[0].pt_X = 20 << 16;
    pt[0].pt_Y = 20 << 16;
    pt[1].pt_X = pt[0].pt_X + (chrccb->ccb_Width << 16);
    pt[1].pt_Y = pt[0].pt_Y;
    pt[2].pt_X = pt[1].pt_X;
    pt[2].pt_Y = pt[0].pt_Y + (chrccb->ccb_Height << 16);
    pt[3].pt_X = pt[0].pt_X;
    pt[3].pt_Y = pt[2].pt_Y;
    blt_cel (chrccb, 0, 0, chrccb->ccb_Width, chrccb->ccb_Height, pt);

    batch_cels (1);
}
while (ReadControlPad (~0));
while (!ReadControlPad (~0));
while (ReadControlPad (~0));
SetVRAMPages (VRAMIOReq, theScreen.sc_Bitmaps[theScreen.sc_curScreen]->bm_Buffer,
	0, theScreen.sc_nFrameBufferPages, ~0);

{
    int32	x, y, size;
    char	*buf;
    CCB		*ccb;
    
    buf = LoadFile ("mask.cel", &size, MEMTYPE_ANY);
    ccb = ParseCel (buf, size);
	
    for (y = 0; y < 23; y++)
    {
	for (x = 0; x < 49; x++)
	{
	    *cur_ccb = *ccb;
	    cur_ccb->ccb_XPos = (20 + (x << 2)) << 16;
	    cur_ccb->ccb_YPos = (20 + (y << 2)) << 16;
	    CLR_CEL_FLAGS (cur_ccb, CCB_NPABS | CCB_LAST);
	    SET_CEL_FLAGS (cur_ccb, CCB_PPABS | CCB_ACE | CCB_LCE);
	    cur_ccb->ccb_NextPtr = (CCB *)MakeCCBRelative (&cur_ccb->ccb_NextPtr, cur_ccb + 1);
	    
	    cur_ccb++;
	}
    }
    
    batch_cels (1);
    
while (ReadControlPad (~0));
while (!ReadControlPad (~0));
while (ReadControlPad (~0));
SetVRAMPages (VRAMIOReq, theScreen.sc_Bitmaps[theScreen.sc_curScreen]->bm_Buffer,
	0, theScreen.sc_nFrameBufferPages, ~0);
}

    dst_cx = dst_cy = 160 << 16;

    x = (WIDTH / 2) / XBANDS;
    i = XBANDS - 1;
    do
    {
	src_w[i] = x;
    } while (i--);

    if (x * XBANDS < (WIDTH / 2))
    {
	x = (WIDTH / 2) - XBANDS * x;
	i = 0;
	do
	{
	    src_w[i++]++;
	} while (--x);
    }

    x = 0;
    
    build_tables (da);
    
Rotate:

start_time = GetAudioTime ();
    da = 1;
    for (y = 0, i = 0; y < HEIGHT;)
    {
#define src_h	ystep[i]
	draw_band (chrccb, x, y, src_w, src_h, dst_cx, dst_cy, i);
	y += src_h;
	i += da;
	if (src_h == 0)
	{
	    --i;
	    da = -1;
	    if (HEIGHT & 1)
		--i;
	}
    }
    
    if (lumccb)
    {
	Point	pt[4];
	    
	pt[0].pt_X = dst_cx + (lumccb->ccb_Width << 15);
	pt[0].pt_Y = dst_cy + (lumccb->ccb_Height << 15);
	pt[1].pt_X = pt[0].pt_X;
	pt[1].pt_Y = pt[0].pt_Y - (lumccb->ccb_Height << 16);
	pt[2].pt_X = pt[0].pt_X - (lumccb->ccb_Width << 16);
	pt[2].pt_Y = pt[1].pt_Y;
	pt[3].pt_X = pt[2].pt_X;
	pt[3].pt_Y = pt[0].pt_Y;
	blt_cel (lumccb,
		dst_cx - (lumccb->ccb_Width << 15),
		dst_cy - (lumccb->ccb_Height << 15),
		0, 0, pt);
    }

    batch_cels (1);

// for pausing, quitting during rotation
if ((da = ReadControlPad (~0)) & JOYSTART)
{
    while (ReadControlPad (~0));
    while (!ReadControlPad (~0));
    while (ReadControlPad (~0));
}
else if (da)
    goto Done;

    x += incr;
    if (x < 0)
	x = WIDTH - 1;
    else if (x == WIDTH)
	x = 0;

// for quitting after first display
//while (ReadControlPad (~0));
//while (!ReadControlPad (~0));
//exit (0);

ticks += GetAudioTime () - start_time; ct++;

// for freezing after each display
//while (ReadControlPad (~0));
//while (!(da = ReadControlPad (~0)));
//if (da & JOYSTART) exit (0);
    if (x)
	goto Rotate;
Done:    

    UnloadFile (lumbuf);
    UnloadFile (chrbuf);

    CloseAudioFolio ();
    
    Uninit3DO ();
    
printf ("total: %ld times %ld ticks\n", ct, ticks);
    
    exit (0);
}
