#line 1 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
 























#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"



 

















































































 














___toplevel 


 

 
typedef signed char	int8;
typedef signed short	int16;		 
typedef signed long	int32;

typedef char	uchar;			 
typedef uchar	ubyte;
typedef uchar	uint8;

typedef unsigned short	ushort;		 
typedef ushort		uint16;		 

typedef unsigned long	ulong;
typedef ulong		uint32;

typedef volatile long	vlong;
typedef	vlong		vint32;

typedef volatile unsigned long	vulong;
typedef	vulong			vuint32;

typedef	uint8	Boolean;
typedef Boolean	bool;

typedef uint16	unichar;	 

typedef	uint32	size_t;









typedef int32	(*func_t)();	 
typedef uint32	(*uifunc_t)();	 
typedef void	(*vfunc_t)();	 
typedef void	*(*vpfunc_t)();	 

typedef int32	Item;
typedef	int32	Err;

 

typedef void *CodeHandle;

 



 
typedef struct TagArg
{
	uint32 ta_Tag;
	void *ta_Arg;
} TagArg, *TagArgP;








 




 


 
 	 
typedef uint32		pd_mask;




typedef struct pd_set
{
	pd_mask	pds_bits[1];	 
} pd_set;














func_t	make_func(int32);
int32	make_int(func_t);








#line 26 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:debug.h"



 





























































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 75 "Mr. Gristle:3do:Interfaces:1p3:Includes:debug.h"

 

 






 


 
extern void __swi(0x1000e) kprintf(const char *fmt, ... );

extern int __swi(0x10000+30) MayGetChar(void);	 

extern void __swi(0x101) Debug(void);

 
extern void	print_vinfo(void);







typedef struct dbghdr
{
	uint32	dbgLock;
	uint32	dbgReady;
} dbghdr;

typedef struct debugio
{
	uint32	reqOwner;	 
	uint32	reqCallerID;	 
	uint32	reqCommand;
	int32	*reqStatusPtr;
	uint32	ptrs[4];	 
	char    namebuf[ 128 ];
} debugio;

typedef struct macFileIOWrite
{
	int32	Length;
	void*	Buffer;
} macFileIOWrite;


typedef struct macFileIORead
{
	int32	Length;
	int32	Offset;
	void*	Buffer;
} macFileIORead;



 

typedef struct MacStreamIO
{
	volatile uint8 *frame1Ptr;
	volatile uint8 *frame2Ptr;
	int32	top,left;
	int32	width,height;
	int32	modulo;	 
	uint32	flags;
	
} MacStreamIO;





 






#line 27 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"



 














































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 92 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"

 














 
 
 














 
typedef struct Node
{
	struct Node *n_Next;	 
	struct Node *n_Prev;	 
	uint8 n_SubsysType;	 
	uint8 n_Type;		 
	uint8 n_Priority;	 
	uint8 n_Flags;		 
	int32  n_Size;		 
	 
	char *n_Name;		 
} Node, *NodeP;

 
typedef struct NamelessNode
{
	struct NamelessNode *n_Next;
	struct NamelessNode *n_Prev;
	uint8 n_SubsysType;
	uint8 n_Type;
	uint8 n_Priority;
	uint8 n_Flags;
	int32 n_Size;
} NamelessNode, *NamelessNodeP;

typedef struct ItemNode
{
	struct ItemNode *n_Next;  
	struct ItemNode *n_Prev;  
	uint8 n_SubsysType;	 
	uint8 n_Type;		 
	uint8 n_Priority;	 
	uint8 n_Flags;		 
	int32 n_Size;		 
	char *n_Name;		 
	uint8 n_Version;	 
	uint8 n_Revision;	 
	uint8 n_FolioFlags;	 
	uint8 n_ItemFlags;	 
	Item  n_Item;		 
	Item  n_Owner;		 
	void *n_ReservedP;	  
} ItemNode, *ItemNodeP;

 
 
 
 
 

 
 
 





 



 



 
typedef struct MinNode
{
	struct MinNode *n_Next;
	struct MinNode *n_Prev;
} MinNode;


#line 28 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernelnodes.h"



 











































 






___toplevel 


























 


#line 29 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



 











































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 57 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 58 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"

typedef struct Link
{
	struct Link *flink;	 
	struct Link *blink;	 
} Link;

typedef union ListAnchor
{
    struct			 
    {				 
	Link links;
	Link *filler;		
    } head;
    struct
    {
	Link *filler;
	Link links;		 
    } tail;			 
} ListAnchor;

typedef struct List
{
	Node l;			 
	ListAnchor ListAnchor;	 
} List, *ListP;

 



 



 



 










  
 






 
extern uint8 SetNodePri(Node *n, uint8 newpri);	 

 
extern void InsertNodeFromTail(List *l, Node *n);

 
extern void InsertNodeFromHead(List *l, Node *n);

 
 
 
 
extern void UniversalInsertNode(List *l, Node *n, bool (*f)(Node *n,Node *m));

 
extern Node *RemHead(List *l);

 
extern Node *RemTail(List *l);

 
extern void AddTail(List *l, Node *n);

 
extern void AddHead(List *l, Node *n);

 
extern void RemNode( Node *n);

 
extern void InitList(List *l, char *name);

 
extern Node *FindNamedNode(List *l, char *name);






#line 30 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



 

























































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 103 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 104 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"



 


























































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 72 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"

 
 
 
  




Item __swi( 0x10000 +0) CreateSizedItem(int32 ctype,TagArg *p,int32 size);

 
 

Err __swi( 0x10000 +3) DeleteItem(Item i);
Item __swi( 0x10000 +4) FindItem(int32 ctype,TagArg *tp);
Err __swi( 0x10000 +8) CloseItem(Item i);
Item __swi( 0x10000 +5) OpenItem(Item FoundItem, void *args);
int32 __swi( 0x10000 +10) SetItemPri(Item i,uint8 newpri);
Err __swi( 0x10000 +28) SetItemOwner(Item i,Item newOwner);
int32 __swi( 0x10000 +7)        LockItem(Item s,uint32 flags);
Err __swi( 0x10000 +6)        UnlockItem(Item s);

 



 
Item FindNamedItem(int32 ctype, char *name);
Item FindVersionedItem(int32 ctype, char *name, uint8 vers, uint8 rev);
  






 
 
 
enum item_tags
{
	TAG_ITEM_END =  0 ,	 
	TAG_ITEM_NAME,		 
	TAG_ITEM_PRI,		 
	TAG_ITEM_VERSION,	 
	TAG_ITEM_REVISION,	 
	TAG_ITEM_CONSTANT_NAME,  
	TAG_ITEM_RESERVED6,
	TAG_ITEM_RESERVED7,
	TAG_ITEM_RESERVED8,
	TAG_ITEM_RESERVED9,
	TAG_ITEM_LAST = TAG_ITEM_RESERVED9
};

typedef struct ItemEntry
{
	void	*ie_ItemAddr;
	uint32	ie_ItemInfo;
} ItemEntry;




  




void *LookupItem(Item i);
void *CheckItem(Item i,uint8 ftype,uint8 ntype);
  






#line 105 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"



 














































































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 124 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 125 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernelnodes.h"



















































































#line 126 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 127 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 128 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:time.h"



 

























 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 39 "Mr. Gristle:3do:Interfaces:1p3:Includes:time.h"

struct timeval {
        int32    tv_sec;          
        int32    tv_usec;         
};


#line 129 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"

 





 


					 

 
 
 

 
 




typedef struct Task
{
	ItemNode t;
	struct Task	*t_ThreadTask;	 
	Item	*t_ResourceTable;	 
	int32	t_ResourceCnt;	 
	uint32	t_WaitBits;	 
	uint32	t_SigBits;
	uint32	t_AllocatedSigs;
	uint32	*t_StackBase;	 
	int32	t_StackSize;
	uint32	t_regs[13];	 
	uint32	*t_sp;	 
	uint32	t_lk;	 
	uint32	t_pc;	 
	uint32	t_psr;		 
	uint32	t_Userpsr;	 
	uint32	*t_ssp;		 
	uint32	*t_Usersp;	 
	uint32	t_Userlk;	 
	uint32	t_Reserved;
	int32	t_SuperStackSize;
	uint32	*t_SuperStackBase;
	uint32	*t_ObsoleteMemProtectBits;	 
			 
	List	*t_FreeMemoryLists;	 
	void	**t_FolioData;	 
				 

	uint32	t_FolioContext;	 
	struct timeval t_ElapsedTime;

	uint32	t_MaxTicks;	 
	uint32	t_MaxUSecs;	 
	uint32	*t_PageTable;	 
	uint32	*t_ssl;		 
	List	*t_UserStackList;  
	uint32	t_Flags;	 
	MinNode	t_TasksLinkNode; 
} Task, *TaskP;

 
 



 





 
 
 






 
enum task_tags
{
	CREATETASK_TAG_PC = TAG_ITEM_LAST+1,
	CREATETASK_TAG_MAXQ,
	CREATETASK_TAG_STACKSIZE,
	CREATETASK_TAG_ARGC,	 
	CREATETASK_TAG_ARGP,	 
	CREATETASK_TAG_SP,	 
	CREATETASK_TAG_BASE,	 
	CREATETASK_TAG_IMAGE,	 
	CREATETASK_TAG_IMAGESZ,	 
	CREATETASK_TAG_AIF,	 
	CREATETASK_TAG_CMDSTR,	 
	CREATETASK_TAG_SUPER,	 
	CREATETASK_TAG_RSA,	 
	CREATETASK_TAG_USERONLY,	 
	CREATETASK_TAG_ALLOCDTHREADSP	 
};

 
 

 




extern Item CreateThread(char *name, uint8 pri, void (*code)(),int32 stacksize);
extern Err DeleteThread(Item x);

extern int32 __swi( 0x10000 +1) WaitSignal(uint32 sigMask);
extern Err __swi( 0x10000 +2)   SendSignal(Item task,uint32 sigMask);
extern void __swi( 0x10000 +9)   Yield(void);
extern int32 __swi( 0x10000 +21)	AllocSignal(uint32 sigMask);
extern Err __swi( 0x10000 +22)	FreeSignal(uint32 sigMask);
  








#line 106 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"

 
 

typedef struct NodeData
{
	uint8 size;
	uint8 flags;
} NodeData;

 
 
 

typedef struct ItemRoutines
{
	 
	Item  (*ir_Find)(int32 ntype, TagArg *tp);
	Item  (*ir_Create)(void *n, uint8 ntype, void *args);
	int32 (*ir_Delete)(Item it, struct Task *t);
	Item  (*ir_Open)(Node *n, void *args);
	int32 (*ir_Close)(Item it,struct Task *t);
	int32 (*ir_SetPriority)(ItemNode *n, uint8 pri, struct Task *t);
	Err   (*ir_SetOwner)(ItemNode *n, Item newOwner, struct Task *t);
} ItemRoutines;

typedef struct Folio
{
	ItemNode fn;
	int32 f_OpenCount;
	uint8  f_TaskDataIndex;
	uint8 f_MaxSwiFunctions;
	uint8 f_MaxUserFunctions;
	uint8 f_MaxNodeType;
	NodeData *f_NodeDB;
	int32  (*f_OpenFolio)(struct Folio *f);
	void  (*f_CloseFolio)(struct Folio *f);
	int32  (*f_DeleteFolio)(struct Folio *f);

	 
	ItemRoutines *f_ItemRoutines;
	 
	int32  (*f_FolioCreateTask)(struct Task *t,TagArg *tagpt);
	void (*f_FolioDeleteTask)(struct Task *t);
	void (*f_FolioRestoreTask)(struct Task *t);
	void (*f_FolioSaveTask)(struct Task *t);
	 
	uint32	*f_DebugTable;
	int32	reserved[7];
} Folio, *FolioP;

enum folio_tags
{
	CREATEFOLIO_TAG_NUSERVECS = TAG_ITEM_LAST+1,	 
	CREATEFOLIO_TAG_USERFUNCS,	 
	CREATEFOLIO_TAG_DATASIZE,
	CREATEFOLIO_TAG_INIT,
	CREATEFOLIO_TAG_NODEDATABASE,
	CREATEFOLIO_TAG_MAXNODETYPE,
	CREATEFOLIO_TAG_ITEM,
	CREATEFOLIO_TAG_OPENF,
	CREATEFOLIO_TAG_CLOSEF,
	CREATEFOLIO_TAG_DELETEF,
	CREATEFOLIO_TAG_NSWIS,		 
	CREATEFOLIO_TAG_SWIS,		 
	CREATEFOLIO_TAG_TASKDATA	 
};

 
 
 





















 







































extern void __swi( 0x10000 +23) *SetFunction(Item, int32 vnum, int32 vtype, void *newfunc);








#line 31 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"



























































































































































































































































#line 32 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"



 

























































































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 135 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 136 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 137 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 138 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"



























































































































































































































































#line 139 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:setjmp.h"



 

































 







___toplevel 


typedef int jmp_buf[22];	 





extern int setjmp(jmp_buf  );
    






extern void longjmp(jmp_buf  , int  );
    






















#line 140 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"

struct KernelBase
{
	Folio kb;
	List *kb_RomTags;
	List *kb_MemFreeLists;
	List *kb_MemHdrList;
	List *kb_FolioList;	 
	List *kb_Drivers;
	List *kb_Devices;
	List *kb_TaskWaitQ;	 
	List *kb_TaskReadyQ; 
	List *kb_MsgPorts;	 
	List *kb_Semaphores;	 
	Task *kb_CurrentTask;	 
	Node **kb_InterruptHandlers;
	uint32 kb_TimerBits;	 
	uint32 kb_ElapsedQuanta;	 
	uint32 *kb_VRAMHack;
	ItemEntry **kb_ItemTable;	 
	int32   kb_MaxItem;
	uint32 kb_CPUFlags;	 

	uint8 kb_MaxInterrupts;
	uint8 kb_Forbid;	 

	uint8 kb_FolioTableSize;
	uint8 kb_PleaseReschedule;
	uint32 *kb_MacPkt;
	uint32 kb_Flags;
	uint32 kb_Reserved;
	uint32 kb_numticks;	 
	uint32 kb_denomticks;	 
	uint32 kb_Obsolete;	 
	uint8  kb_FolioTaskDataCnt;	 
	uint8  kb_FolioTaskDataSize;	 
	uint8  kb_DRAMSetSize;
	uint8  kb_VRAMSetSize;
	struct Folio **kb_DataFolios;
	jmp_buf	*kb_CatchDataAborts;	 
	uint32 kb_QuietAborts;		 
	uint32 *kb_RamDiskAddr;		 
	int32	kb_RamDiskSize;
	List	*kb_ExtendedErrors;	 
	uint8  	kb_MadamRev;
	uint8  	kb_ClioRev;
	uint8	kb_Resbyte0;
	uint8	kb_Resbyte1;
	Item	kb_DevSemaphore;	 
	List	*kb_SystemStackList;	 
	uint32	kb_Pad;
	uint32	*kb_VRAM0;		 
	uint32	kb_VRAM0Size;
	uint32	*kb_VRAM1;
	uint32	kb_VRAM1Size;
	char	*kb_BootVolumeName;
	List	*kb_Tasks;		 
};


extern struct KernelBase *KernelBase;






  




extern void *AllocateKernelNode(int);
  




 

























 










#line 33 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"



 


















































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 96 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 97 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 98 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernel.h"

























































































































































































































































#line 99 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdlib.h"




 







































#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 46 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdlib.h"





extern void *malloc(int32);	 
extern void free(void *);
extern void *calloc(size_t, size_t);
extern void *realloc(void *oldBlock, size_t newSize);

extern void exit(int status);

extern int32 rand(void);
extern void srand(int32);
extern uint32 urand(void);

extern int _ANSI_rand(void);
extern int _ANSI_srand(unsigned int seed);

extern int32 atoi(const char *nptr);
extern long int atol(const char *nptr);

extern ulong strtoul(const char *nsptr, char **endptr, int base);
extern long strtol(const char *nsptr, char **endptr, int base);






#line 102 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"
			 

  




extern void *AllocMemFromMemLists(List *l,int32 size, uint32 typebits);
extern void FreeMemToMemLists(List *l, void *p, int32 size);
  




 






























  




void __swi( 0x10000 +13)	*AllocMemBlocks(int32 size, uint32 typebits);
Err __swi( 0x10000 +20)	ControlMem(void *p,int32 size,int32 cmd,Item task);
int32 __swi( 0x10000 +33) SystemScavengeMem(void);

extern int32 ScavengeMem(void);

extern int32 GetPageSize(uint32 typebits);

uint32 bankbits(void *p);
extern uint32 GetMemType(void *p);
  





 


typedef struct MemInfo
{
	uint32  minfo_SysFree;     
	uint32  minfo_SysLargest;  
	uint32  minfo_TaskFree;    
	uint32  minfo_TaskLargest; 
} MemInfo;


 
 
typedef struct MemHdr
{
	Node	memh_n;
	uint32	memh_Types;	 
	int32	memh_PageSize;	 
	uint32	memh_PageMask;
	int32	memh_VRAMPageSize;	 
	uint32	memh_VRAMPageMask;
	uint32	*memh_FreePageBits;	 
	uint8	*memh_MemBase;	 
	uint8	*memh_MemTop;
	uint8	memh_FreePageBitsSize;  
	uint8	memh_PageShift;
	uint8	memh_VRAMPageShift;
	uint8	memh_Reserved;
} MemHdr;

 


 








 








 




	 
	 



 








 
 
 

 





typedef struct MemList
{
	Node meml_n;	 
	uint32 meml_Types;	 
	uint32 *meml_OwnBits;	 
	uint32 *meml_WriteBits;	 
	MemHdr *meml_MemHdr;
	List *meml_l;
	Item   meml_Sema4;
	uint8 meml_OwnBitsSize;	 
	uint8 meml_Reserved[3];
} MemList;

 
 

 
  




struct MemList *AllocMemList(void *p,char *name);
void FreeMemList(struct MemList *ml);
void *AllocMemFromMemList(struct MemList *ml,int32 size, uint32 memflags);
void FreeMemToMemList(struct MemList *ml,void *p, int32 size);

void availMem( MemInfo *minfo, uint32 flags);






#line 34 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"



 






















































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 68 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 69 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernelnodes.h"



















































































#line 70 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 71 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 72 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"



























































































































































































































































#line 73 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"

typedef struct SemaphoreWaitNode
{
	NamelessNode swn;
	Task *swn_Task;
} SemaphoreWaitNode, *SemaphoreWaitNodeP;

typedef struct Semaphore
{
	ItemNode s;
	uint32	sem_bit;	 



	Item	sem_Owner;	 

	int32	sem_NestCnt;	 
	List sem_TaskWaitingList;
} Semaphore, *SemaphoreP;

  




int32 __swi( 0x10000 +7)	LockSemaphore(Item s,uint32 flags);
Err __swi( 0x10000 +6)	UnlockSemaphore(Item s);










extern Item CreateSemaphore(char *name, uint8 pri);
  







#line 35 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:io.h"



 
























































































































 






___toplevel 



#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 135 "Mr. Gristle:3do:Interfaces:1p3:Includes:io.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 136 "Mr. Gristle:3do:Interfaces:1p3:Includes:io.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"



 






































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 84 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 85 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernelnodes.h"



















































































#line 86 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 87 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 88 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"

typedef struct MsgPort
{
	ItemNode	mp;
	uint32	mp_Signal;	 
	List	mp_Msgs;	 
	void   *mp_UserData;	 
	uint32	mp_Reserved;	 
} MsgPort;

 


enum msgport_tags
{
	CREATEPORT_TAG_SIGNAL = TAG_ITEM_LAST+1, 
	CREATEPORT_TAG_USERDATA		 
};
  




extern Item CreateMsgPort(char *name, uint8 pri, uint32 signal);
  






typedef struct Message
{
	ItemNode	msg;
	Item 	msg_ReplyPort;
	uint32	msg_Result;	 
	void	*msg_DataPtr;	 
	int32	msg_DataSize;	 
	Item	msg_MsgPort;	 
	uint32	msg_DataPtrSize; 
	Item	msg_SigItem;	 
} Message;



 
 





enum message_tags
{
	CREATEMSG_TAG_REPLYPORT	= TAG_ITEM_LAST+1,
	CREATEMSG_TAG_MSG_IS_SMALL,
	CREATEMSG_TAG_DATA_SIZE			 
};
  




extern Item CreateMsg(char *name, uint8 pri, Item mp);
extern Item CreateSmallMsg(char *name, uint8 pri, Item mp);
extern Item CreateBufferedMsg(char *name, uint8 pri, Item mp, uint32 buffsize);


extern Err __swi( 0x10000 +16)  SendMsg(Item mp,Item msg,
					 void *dataptr, int32 datasize);
extern Err __swi( 0x10000 +16)  SendSmallMsg(Item mp,Item msg,
					 uint32 val1, uint32 val2);
extern Item __swi( 0x10000 +19)	  GetMsg(Item mp);
extern Item __swi( 0x10000 +15)	  GetThisMsg(Item msg);
extern Item WaitPort(Item mp,Item msg);
extern Err __swi( 0x10000 +18)  ReplyMsg(Item msg, int32 result,
					  void *dataptr, int32 datasize);
extern Err __swi( 0x10000 +18)  ReplySmallMsg(Item msg, int32 result,
					  uint32 val1, uint32 val2);








#line 137 "Mr. Gristle:3do:Interfaces:1p3:Includes:io.h"

typedef struct IOBuf
{
	void	*iob_Buffer;	 
	int32	iob_Len;	 
} IOBuf;

 
typedef struct IOInfo
{
	uint8	ioi_Command;	 
	uint8	ioi_Flags;	 
	uint8	ioi_Unit;	 
	uint8	ioi_Flags2;	 
	uint32	ioi_CmdOptions;	 
	uint32	ioi_User;	 
	int32 	ioi_Offset;	 
	IOBuf	ioi_Send;	 
	IOBuf	ioi_Recv;	 
} IOInfo;

 




 



 



 

 

 

 
 


 
 







				 


 






 


 
 


 


typedef struct IOReq IOReq;


struct IOReq {
	ItemNode	io;
	MinNode	io_Link;
	struct Device	*io_Dev;
	struct IOReq	*(*io_CallBack)(struct IOReq *iorP);  
	IOInfo	io_Info;
	int32	io_Actual;	 
	uint32	io_Flags;	 
	int32	io_Error;	 
	int32	io_Extension[2]; 
	Item	io_MsgItem;
	Item	io_SigItem;	 
};

 
 




enum ioreq_tags
{
    CREATEIOREQ_TAG_REPLYPORT = TAG_ITEM_LAST+1,     
    CREATEIOREQ_TAG_DEVICE			     
};
  




extern Item CreateIOReq(char *name, uint8 pri, Item dev, Item mp); 


 
 
 

Err __swi( 0x10000 +24)	SendIO(Item ior, IOInfo *ioiP);  
void __swi( 0x10000 +25)	AbortIO(Item ior);
void __swi( 0x10000 +34)	CompleteIO(IOReq *ior);  

int32 CheckIO(Item ior);		    
Err WaitIO(Item ior);		    
Err DoIO(Item ior, IOInfo *ioiP);    
  





#line 36 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:strings.h"
 



 





#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:string.h"



 










































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 88 "Mr. Gristle:3do:Interfaces:1p3:Includes:string.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdlib.h"










































































#line 89 "Mr. Gristle:3do:Interfaces:1p3:Includes:string.h"
			 
  




extern void *memcpy(void *  , const void *  , size_t   );
	 
extern void *memmove(void *  , const void *  , size_t   );
	 

extern char *strcpy(char *  , const char *  );
	 
extern char *strncpy(char *  , const char *  , size_t  );
	 

extern char *strcat(char *  , const char *  );
	 
extern char *strncat(char *  , const char *  , size_t  );
	 

extern int strcmp(const char *  , const char *  );
	 
extern int strcasecmp(const char *  , const char *  );
	 
extern int strncmp(const char *  , const char *  , size_t n);
	 
	 
extern int strncasecmp(const char *  , const char *  , size_t n);
	 
	 

extern size_t strlen(const char *  );
	 

extern char *strchr(const char *  , int c  );
	 

extern void *memset(void *  , int  , size_t  );
	 

extern void bzero(void *s, int len);
extern void bcopy(void *s,void *d,int len);




 










 
extern int ffs(unsigned int mask); 	 
extern int FindMSB(uint32 mask); 	 
extern int FindLSB(uint32 mask); 	 

 



extern int CountBits(uint32 mask);	 
  








#line 12 "Mr. Gristle:3do:Interfaces:1p3:Includes:strings.h"












#line 37 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdlib.h"










































































#line 38 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
 

___toplevel 


 
















































#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 54 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 55 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 56 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 57 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 58 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"



 






































































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 116 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 117 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 118 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"

extern char _SixToAscii[];







 






















 



 




 







 




 







 





 



 










				 
















 


					 






















 


 










 



 



















typedef struct ErrorText
{
	ItemNode et;
	uint32	et_ObjID;	 
	uint8	et_MaxErr;	 
	uint8	et_MaxStringSize;	 
	uint8	et_Reserved[2];
	char	**et_ErrorTable;	 
} ErrorText;

enum errtxt_tags
{
	ERRTEXT_TAG_OBJID = TAG_ITEM_LAST+1,
	ERRTEXT_TAG_MAXERR,
	ERRTEXT_TAG_TABLE,
	ERRTEXT_TAG_MAXSTR
};
  




void PrintfSysErr(Item);	 
int32 GetSysErr(char *buff,int32 buffsize,Item err);	 















#line 59 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:timer.h"



 


































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 48 "Mr. Gristle:3do:Interfaces:1p3:Includes:timer.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 49 "Mr. Gristle:3do:Interfaces:1p3:Includes:timer.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 50 "Mr. Gristle:3do:Interfaces:1p3:Includes:timer.h"

 

typedef struct Timer
{
	ItemNode	tm;
	uint8	tm_ID;	 
	uint8	tm_Size;	 
	uint8	tm_IntNum;	 
	uint8	tm_r[1];
	 
	void	(*tm_Control)(struct Timer *,int32 set,int32 clr);
	void	(*tm_Load)(int32 n,int32 value16, int32 reloadvalue16);
	int32	(*tm_Read)(int32 n);
} Timer;



enum timer_tags
{
	CREATETIMER_TAG_NUM = TAG_ITEM_LAST+1,	 
	CREATETIMER_TAG_FLAGS	 
};











#line 60 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
 




































































































 






 



#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:io.h"




































































































































































































































































#line 114 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:discdata.h"
 














































 











 






















 






 


typedef struct DiscLabel {
  uchar    dl_RecordType;                    
  uint8    dl_VolumeSyncBytes[5];            
  uchar    dl_VolumeStructureVersion;        
  uchar    dl_VolumeFlags;                   
  uchar    dl_VolumeCommentary[32];          
  uchar    dl_VolumeIdentifier[32];          
  uint32   dl_VolumeUniqueIdentifier;        
  uint32   dl_VolumeBlockSize;               
  uint32   dl_VolumeBlockCount;              
  uint32   dl_RootUniqueIdentifier;          
  uint32   dl_RootDirectoryBlockCount;       
  uint32   dl_RootDirectoryBlockSize;        
  uint32   dl_RootDirectoryLastAvatarIndex;  
  uint32   dl_RootDirectoryAvatarList[ 7 +1];
} DiscLabel;

typedef struct DirectoryHeader {
  int32      dh_NextBlock;
  int32      dh_PrevBlock;
  uint32     dh_Flags;
  uint32     dh_FirstFreeByte;
  uint32     dh_FirstEntryOffset;
} DirectoryHeader;














typedef struct DirectoryRecord {
   uint32 dir_Flags; uint32 dir_UniqueIdentifier; uint32 dir_Type; uint32 dir_BlockSize; uint32 dir_ByteCount; uint32 dir_BlockCount; uint32 dir_Burst; uint32 dir_Gap; char dir_FileName[ 32 ]; uint32 dir_LastAvatarIndex; uint32 dir_AvatarList[ 1 ]; 
} DirectoryRecord;





#line 115 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"



 



































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 81 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 82 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 83 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 84 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:kernelnodes.h"



















































































#line 85 "Mr. Gristle:3do:Interfaces:1p3:Includes:device.h"

typedef struct Device
{
	ItemNode	dev;
	struct Driver *dev_Driver;
	int32	dev_OpenCnt;
				 
	int32	(*dev_CreateIOReq)(struct IOReq *iorP);
	int32	(*dev_DeleteIOReq)(struct IOReq *iorP);
	int32	(*dev_Open)(struct Device *devP);	 
	void	(*dev_Close)(struct Device *devP);	 
	int32	dev_IOReqSize;	 
	List	dev_IOReqs;	 
	uint8	dev_MaxUnitNum;	 
	uint8	dev_Reserved[3];
	int32	(*dev_Init)(struct Device *devP);	 
	int32	(*dev_DeleteDev)(struct Device *devP);	 
	uint32	dev_Reserved1;
} Device;

enum device_tags
{
	CREATEDEVICE_TAG_DRVR = TAG_ITEM_LAST+1,
	CREATEDEVICE_TAG_CRIO,		 
	CREATEDEVICE_TAG_DLIO,		 
	CREATEDEVICE_TAG_OPEN,		 
	CREATEDEVICE_TAG_CLOSE,		 
	CREATEDEVICE_TAG_IOREQSZ,	 
	CREATEDEVICE_TAG_INIT		 
};





extern Item CreateDevice(char *name, uint8 pri, Item driver);







 




typedef struct TimerDevice
{
	Device	timerdev_dev;
	uint32  timerdev_VBlankCountOverFlow;
	uint32  timerdev_VBlankCount;
} TimerDevice;


#line 116 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"



 



























































































 






___toplevel 


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 105 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 106 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:msgport.h"










































































































































































#line 107 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"






typedef struct Driver
{
	ItemNode	drv;
	MsgPort	*drv_MsgPort;
	int32	drv_OpenCnt;
	void	(*drv_AbortIO)(struct IOReq *iorP);
	int32	(*drv_DispatchIO)(struct IOReq *iorP);
	Item	(*drv_Init)(struct Driver *drvP);  
	int32	(**drv_CmdTable)(struct IOReq *iorP);
	uint8	drv_MaxCommands;
	uint8	drv_pad[3];
} Driver;

enum driver_tags
{
	CREATEDRIVER_TAG_ABORTIO = TAG_ITEM_LAST+1,
	CREATEDRIVER_TAG_MAXCMDS,
	CREATEDRIVER_TAG_CMDTABLE,
	CREATEDRIVER_TAG_MSGPORT,
	CREATEDRIVER_TAG_INIT,
	CREATEDRIVER_TAG_DISPATCH
};

 




extern Item CreateDriver(char *name, uint8 pri, Item (*init)());







 

 


typedef struct DeviceStatus
{
        uint8   ds_DriverIdentity;
	uint8   ds_DriverStatusVersion;
	uint8	ds_FamilyCode;
	uint8   ds_headerPad;
	uint32  ds_MaximumStatusSize;
	uint32  ds_DeviceBlockSize;
	uint32  ds_DeviceBlockCount;
	uint32  ds_DeviceFlagWord;
	uint32	ds_DeviceUsageFlags;
	uint32  ds_DeviceLastErrorCode;
	uint32	ds_DeviceMediaChangeCntr;
	uint32  ds_Reserved;
} DeviceStatus;

 















 













 

 









 



typedef struct RamDeviceStatus
{
	DeviceStatus ramdev_ds;
	uint32		ramdev_DeviceAddress;	 
} RamDeviceStatus;

typedef struct XBusDeviceStatus
{
	DeviceStatus	xbus_ds;
	uint32		xbus_ManuIdNum;
	uint32		xbus_ManuDevNum;
	uint32		xbus_ManuRevNum;
	uint32		xbus_ManuFlags;
	uint8		xbus_Flags;
	uint8		reserved[3];
} XBusDeviceStatus;

 





 





#line 117 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 118 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:timer.h"

















































































#line 119 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:semaphore.h"

















































































































#line 120 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"


























 





























struct HighLevelDisk;
struct File;

typedef struct HighLevelDisk HighLevelDisk;
typedef struct File File;

typedef int32 (*FileDriverQueueit)
     (HighLevelDisk *theDevice, IOReq *theRequest);
typedef void (*FileDriverHook) (HighLevelDisk *theDevice);
typedef IOReq * (*FileDriverEA) (IOReq *theRequest);
typedef void (*FileDriverAbort) (IOReq *theRequest);
typedef Item (*FileDriverEntry) (File *parent, char *name);
typedef Err (*FileDriverAlloc) (IOReq *theRequest);
typedef void (*FileDriverClose) (File *theFile);

 








struct HighLevelDisk {
  Device             hdi;
  uchar              hdi_DeviceType;
  uchar              hdi_DeviceBusy;
  uchar              hdi_RequestPriority;
  uchar              hdi_RunningPriority;
  FileDriverQueueit  hdi_QueueRequest;
  FileDriverHook     hdi_ScheduleIO;
  FileDriverHook     hdi_StartIO;
  FileDriverAbort    hdi_AbortIO;
  FileDriverEA       hdi_EndAction;
  FileDriverEntry    hdi_CreateEntry;
  FileDriverEntry    hdi_DeleteEntry;
  FileDriverAlloc    hdi_AllocSpace;
  FileDriverClose    hdi_CloseFile;
  List               hdi_RequestsToDo;
  List               hdi_RequestsRunning;
  List               hdi_RequestsDeferred;
  Item               hdi_RawDeviceItem;
  uchar              hdi_RawDeviceUnit;
  uchar              hdi_rfu[3];
};

 





typedef struct OptimizedDisk {
  HighLevelDisk      odi;
  struct FileIOReq **odi_RequestSort;
  IOReq             *odi_RawDeviceRequest;
  int32              odi_RequestSortLimit;
  uint32             odi_BlockSize;
  uint32             odi_BlockCount;
  uint32             odi_LastBlockRead;
  uint32             odi_RawDeviceBlockOffset;
  uchar              odi_DeferredPriority;
} OptimizedDisk;

















 




typedef struct MacFileInfo {
  uint32     mfi_Length;
  uint32     mfi_Info;
  uint32     mfi_NumEntries;
  uint32     rfu[5];
} MacFileInfo;



typedef struct MacDirectoryEntry {
  MacFileInfo   mde_Info;
  char          mde_Name[64];
} MacDirectoryEntry;

typedef struct MacDisk {
  HighLevelDisk      mdi;
  IOReq             *mdi_RawDeviceRequest;
  uchar              mdi_CurrentPathName[ 256 ];
  MacDirectoryEntry  mdi_DirectoryEntry;
} MacDisk;

 









typedef struct LinkedMemBlock {
  uint32             lmb_Fingerprint;  
  uint32             lmb_FlinkOffset;  
  uint32             lmb_BlinkOffset;  
  uint32             lmb_BlockCount;  
  uint32             lmb_HeaderBlockCount;
} LinkedMemBlock;






 


typedef struct LinkedMemFileEntry {
  LinkedMemBlock     lmfe;
  uint32             lmfe_ByteCount;
  uint32             lmfe_UniqueIdentifier;
  uint32             lmfe_Type;
  char               lmfe_FileName[32];
} LinkedMemFileEntry;

enum LinkedMemDiskFSM 
{
  LMD_Idle,
  LMD_Done,
  LMD_Fault,
  LMD_Initialization,
  LMD_CheckIsThisLast,
  LMD_CheckSuccessor,
  LMD_CutTheSlack,
  LMD_CutOffExcess,
  LMD_GetOldBackLink,
  LMD_FixOldBackLink,
  LMD_SuccessfulChomp,
  LMD_TryNewBlock,
  LMD_ExamineNewBlock,
  LMD_ReadToCopy,
  LMD_WriteCopiedData,
  LMD_CopyDone,
  LMD_FetchHeader,
  LMD_MarkItFree,
  LMD_BackUpOne,
  LMD_ScanAhead,
  LMD_AttemptMerge,
  LMD_FixFlink,
  LMD_DoneDeleting,
  LMD_InitScan,
  LMD_ExamineEntry,
  LMD_ReadToSetEOF,
  LMD_WriteWithNewEOF,
  LMD_ReadToSetType,
  LMD_WriteWithNewType,
  LMD_FsStat,
  LMD_ExtendEOF
};

typedef struct LinkedMemDisk {
  HighLevelDisk         lmd;
  IOReq                *lmd_RawDeviceRequest;
  uint32                lmd_BlockSize;
  uint32                lmd_BlockCount;
  uint32                lmd_RawDeviceBlockOffset;
  uint32                lmd_CurrentEntryOffset;
  int32                 lmd_CurrentEntryIndex;
  struct File          *lmd_CurrentFileActingOn;
  int32                 lmd_ThisBlockCursor;
  int32                 lmd_ThisBlockIndex;
  int32                 lmd_OtherBlockCursor;
  int32                 lmd_MergeBlockCursor;
  int32                 lmd_HaltCursor;
  int32                 lmd_DesiredSize;
  int32                 lmd_ContentOffset;
  int32                 lmd_BlocksToCopy;
  int32                 lmd_BlocksToRead;
  int32                 lmd_CopyBlockSize;
  int32                 lmd_FileHeaderBlockSize;
  int32                 lmd_FileHeaderByteSize;
  enum LinkedMemDiskFSM lmd_FSM;
  LinkedMemFileEntry    lmd_ThisBlock;
  LinkedMemFileEntry    lmd_OtherBlock;
  uchar                 lmd_CopyBuffer[ 256 ];
} LinkedMemDisk;

typedef struct FileSystem {
  ItemNode         fs;
  char             fs_FileSystemName[ 32 ];
  HighLevelDisk   *fs_Device;
  uint32           fs_Flags;
  uint32           fs_VolumeBlockSize;
  uint32           fs_VolumeBlockCount;
  uint32           fs_VolumeUniqueIdentifier;
  uint32           fs_RootDirectoryBlockCount;
  int32            fs_DeviceBlocksPerFilesystemBlock;
  struct File     *fs_RootDirectory;
} FileSystem;














 
struct File {
  ItemNode         fi;
  char             fi_FileName[ 32 ];
  FileSystem      *fi_FileSystem;
  struct File     *fi_ParentDirectory;



  uint32           fi_UniqueIdentifier;
  uint32           fi_Type;
  uint32           fi_Flags;
  uint32           fi_UseCount;
  uint32           fi_BlockSize;
  uint32           fi_ByteCount;
  uint32           fi_BlockCount;
  uint32           fi_Burst;
  uint32           fi_Gap;
  uint32           fi_LastAvatarIndex;
  uint32           fi_FilesystemSpecificData;
  uint32           fi_AvatarList[1];
};

 

















typedef struct OpenFile {
  Device             ofi;
  uchar              ofi_DeviceType;
  uchar              ofi_pad[3];
  File              *ofi_File;
  uint32             ofi_Flags;
  int32              ofi_NextBlock;
  uint32             ofi_BufferUseCount;    
  void              *ofi_RegisteredBuffer;
  IOReq             *ofi_InternalIOReq;
  uint32             ofi_BufferBlocks;
  uint32             ofi_BufferBlocksAvail;
  uint32             ofi_BufferBlocksFilled;
} OpenFile;





typedef struct BufferedFile {
  ItemNode           bfi;
  Item               bfi_OpenFile;
  void              *bfi_Buffer;
  uint32             bfi_BufferBlocks;
  uint32             bfi_BufferBlocksAvail;
  uint32             bfi_BufferBlocksFilled;
  uint32             bfi_BufferSeekBase;
  uint32             bfi_SeekNow;
} BufferedFile;

typedef struct FileIOReq {
  IOReq          fio;
  uint32         fio_Flags;
  uint32         fio_BlockCount;
  uint32         fio_BlockBurst;
  uint32         fio_DevBlocksPerFileBlock;
  uint32         fio_BlockInterleave;
  uint32         fio_AbsoluteBlockNumber;
  uint32         fio_AvatarIndex;
} FileIOReq;




typedef struct FileStatus {
  DeviceStatus   fs;
  uint32         fs_ByteCount;
} FileStatus;

typedef struct IoCacheEntry {
  Node           ioce;
  uint32         ioce_FilesystemUniqueIdentifier;
  uint32         ioce_FileUniqueIdentifier;
  uint32         ioce_FileBlockOffset;
  uint32         ioce_Priority;
  uint32         ioce_CacheFormat;
  uint32         ioce_CacheFirstIndex;
  uint32         ioce_CacheMiscValue;
  uint32         ioce_CachedBlockSize;
  void          *ioce_CachedBlock;
} IoCacheEntry;







typedef struct IoCache {
  Node           ioc;
  uint32         ioc_EntriesAllowed;
  uint32         ioc_EntriesPresent;
  List           ioc_CachedBlocks;
} IoCache;

typedef enum SchedulerSweepDirection {
  BottomIsCloser = 1,
  TopIsCloser = 2
} SchedulerSweepDirection;

typedef struct Alias {
  ItemNode       a;
  uchar         *a_Value;
} Alias;

typedef struct FileFolio {
  Folio          ff;
  File          *ff_Root;
  List           ff_Devices;
  List           ff_Filesystems;
  List           ff_Files;
  List           ff_OpenFiles;
  int32          ff_NextUniqueID;
  int32          ff_OpensSinceCleanup;
  struct {
      Task          *ffd_Task;
      TimerDevice   *ffd_TimerDevice;
      uint32         ffd_QueuedSignal;     
      uint32         ffd_WaitingSignal;    
      uint32         ffd_RescheduleSignal; 
      uint32         ffd_CDRomSignal;      
    } ff_Daemon;
} FileFolio;

typedef struct FileFolioTaskData {
  File          *fftd_CurrentDirectory;
  File          *fftd_ProgramDirectory;
  uint32         fftd_ErrorCode;
  List           fftd_AliasList;
} FileFolioTaskData;

typedef struct FileSystemEntry {
  uint32     fse_Flags;
  char       fse_Name[ 32 ];
} FileSystemEntry;

 
















typedef struct FileSystemStat {
  uint32     fst_BitMap;	 
  uint32     fst_CreateTime;	 
  uint32     fst_BlockSize;	 
  uint32     fst_Size;		 
  uint32     fst_MaxFileSize;	 
  uint32     fst_Free;		 
  uint32     fst_Used;		 
} FileSystemStat;






#line 62 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystemdefs.h"
 



















 











 



extern FileFolio *fileFolio;
extern Driver *fileDriver;


#line 63 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filefunctions.h"
 







































































 






 





extern Item  __swi( 0x00030000 +0) OpenDiskFile(char *path);
extern int32 __swi( 0x00030000 +1) CloseDiskFile(Item fileItem);
extern Item  __swi( 0x00030000 +4) MountFileSystem(Item deviceItem,
						   int32 unit,
						   uint32 blockOffset);
extern Item  __swi( 0x00030000 +5) OpenDiskFileInDir(Item dirItem, char *path);
extern Item  __swi( 0x00030000 +6) MountMacFileSystem(char *path);
extern Item  __swi( 0x00030000 +7) ChangeDirectory(char *path);
extern Item  __swi( 0x00030000 +8) GetDirectory(char *pathBuf, int pathBufLen);
extern Item  __swi( 0x00030000 +9) CreateFile(char *path);
extern Err   __swi( 0x00030000 +10) DeleteFile(char *path);
extern Item  __swi( 0x00030000 +11) CreateAlias(char *aliasPath,
						char *realPath);
extern int32 __swi( 0x00030000 +12) LoadOverlay(void *mumble);  
extern Err   __swi( 0x00030000 +13) DismountFileSystem(char *name);


extern Item                        LoadProgram(char *path);
extern Item                        LoadProgramPrio(char *path, int32 prio);
extern Err                         LoadCode(char *fileName, CodeHandle *code);
extern Err                         UnloadCode(CodeHandle code);
extern int32                       ExecuteAsSubroutine(CodeHandle code,
						       uint32 argc,
						       char **argv);
extern Item                        ExecuteAsThread(CodeHandle code,
						   uint32 argc,
						   char **argv,
						   char *threadName,
						   int32 priority);

extern void                        InitFileFolioGlue(void);






#line 64 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestream.h"
 































 






#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filesystem.h"
 









































































































































































































































































































































































































































































































































































































#line 41 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestream.h"

 





enum SeekOrigin {
  SEEK_NOT = 0,
  SEEK_SET = 1,
  SEEK_CUR = 2,
  SEEK_END = 3
  };




typedef struct Stream {
  Item            st_OpenFileItem;
  IOReq          *st_IOReq;
  uchar          *st_Buffer;
  int32           st_BufferLen;
  int32           st_NextBufByteOffset;
  int32           st_BufBytesAvail;
  uint32          st_FileOffset;
  int32           st_FileBlockSize;
  int32           st_FileBlockCount;
  int32           st_FileLength;
  int32           st_CursorPosition;
  int32           st_SeekTo;
  uchar           st_IOInProgress;
  uchar           st_HadError;
  enum SeekOrigin st_SeekOrigin;
} Stream;


#line 65 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestreamfunctions.h"
 






















 









#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestream.h"
 










































































#line 35 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestreamfunctions.h"







 



extern Stream *OpenDiskStream(char *theName, int32 bSize);
extern int32 SeekDiskStream(Stream *theStream, int32 offset,
			       enum SeekOrigin whence);
extern void CloseDiskStream(Stream *theStream);
extern int32 ReadDiskStream(Stream *theStream, char *buffer, int32 nBytes);






#line 66 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:hardware.h"
 

 



















#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 24 "Mr. Gristle:3do:Interfaces:1p3:Includes:hardware.h"

 
 


















 










 













 






 


























 





 





 





 





 





 






 



 






 





































 















 







 



 

















 

 



 














 




 





 





 






 






 
 




 



















 



 





 









 





 





 




 















 




 
uint32 __swi( 0x10000 +17) ReadHardwareRandomNumber(void);







#line 68 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"




 
 
 
 
 


 





 







 




 










 
 








 



















 














 




 


 


 


 



 



 


 


 


 


 




 




 



 








 


 


 


 



 







 


 
 


 


 


 
 





 
 




 



 





 


 






 


 





 
 
 
 
 

 




























 









 
 
 
 
 

typedef uint32 VDLEntry;

typedef uint32  Color;
typedef int32  Coord;
typedef uint32  RGB888;
typedef uint8 CharMap;


 
typedef uint32 CelData[];



 
typedef struct FontEntry
	{
	Node     ft;
	int32   ft_CharValue;
	int32   ft_Width;
	CelData *ft_Image;
	int32    ft_ImageByteCount;

	struct FontEntry *ft_LesserBranch;
	struct FontEntry *ft_GreaterBranch;
	} FontEntry;



typedef struct ScreenGroup {
  ItemNode sg;
  
   
  int32 sg_Y;
  
   
  int32 sg_ScreenHeight;
  
   


  int32 sg_DisplayHeight; 
  
   
  List sg_SharedList;
  
   
   
  int32 sg_Add_SG_Called;

  List sg_ScreenList;
} ScreenGroup;


typedef struct DisplayInfo {
  Node di;

  TagArg di_Tags[1];
} DisplayInfo;

 

 

 

 

 

 

 

 

 

 

 

 

 


 


 

 
 
 

 

 

 




typedef struct Bitmap {
  ItemNode bm;
  
  ubyte *bm_Buffer; 
  
  int32 bm_Width;
  int32 bm_Height;
  int32 bm_VerticalOffset;
  int32 bm_Flags;
  
  int32 bm_ClipWidth;
  int32 bm_ClipHeight;
  int32 bm_ClipX;
  int32 bm_ClipY;
  int32 bm_WatchDogCtr;   
  int32 bm_SysMalloc;   
  
   
  List bm_SharedList;
  
  int32 bm_CEControl;
  int32 bm_REGCTL0;
  int32 bm_REGCTL1;
  int32 bm_REGCTL2;
  int32 bm_REGCTL3;
} Bitmap;


 



 
typedef struct VDL {
  ItemNode vdl;   
  struct Screen* vdl_ScreenPtr;
  VDLEntry* vdl_DataPtr;  
  int32    vdl_Type;
  int32    vdl_DataSize;   
  
  int32	vdl_Flags;	 
  int32 vdl_DisplayType;	 
  int32 vdl_Height;	 
  int32 vdl_Offset;	 
} VDL;
			  


 
typedef struct Screen
	{
	ItemNode scr;

	ScreenGroup *scr_ScreenGroupPtr;

	VDL       *scr_VDLPtr;
	Item      scr_VDLItem;  
	int32     scr_VDLType;

	int32 scr_BitmapCount;
	List  scr_BitmapList;

	List scr_SharedList;
Bitmap *scr_TempBitmap;
	} Screen;


 


typedef struct BitmapInfo
	{
	Item    bi_Item;
	Bitmap *bi_Bitmap;
	ubyte  *bi_Buffer;
	} BitmapInfo;

 

























typedef struct ScreenInfo
	{
	Item       si_Item;
	Screen    *si_Screen;
	BitmapInfo si_BitmapInfo;
	} ScreenInfo;

typedef struct Point
	{
	Coord pt_X;
	Coord pt_Y;
	} Point;


typedef struct Rect
	{
	Coord rect_XLeft;
	Coord rect_YTop;
	Coord rect_XRight;
	Coord rect_YBottom;
	} Rect;


 
typedef struct GrafCon
	{
	Node  gc;
	Color gc_FGPen;
	Color gc_BGPen;
	Coord gc_PenX;
	Coord gc_PenY;
	uint32 gc_Flags;
	} GrafCon;


 
typedef struct CCB
	{
	uint32 ccb_Flags;

	struct CCB *ccb_NextPtr;
	CelData    *ccb_SourcePtr;
	void       *ccb_PLUTPtr;

	Coord ccb_XPos;
	Coord ccb_YPos;
	int32  ccb_HDX;
	int32  ccb_HDY;
	int32  ccb_VDX;
	int32  ccb_VDY;
	int32  ccb_HDDX;
	int32  ccb_HDDY;
	uint32 ccb_PIXC;
	uint32 ccb_PRE0;
	uint32 ccb_PRE1;

	 


	int32  ccb_Width;
	int32  ccb_Height;
	} CCB;


 




 



typedef struct FontChar
	{
	uint32   fc_CharValue;
	uint8    fc_Width;
	CelData *fc_Image;
	} FontChar;

 










typedef struct Font
	{
	uint8      font_Height;
	uint8      font_Flags;
	CCB       *font_CCB;
	
	 
	FontEntry *font_FontEntries;
	} Font;
 








 



typedef struct GrafFolio
{
        Folio gf;

	uint32	gf_Flags;




	volatile uint32 gf_VBLNumber;


	void*	gf_ZeroPage;
	void*	gf_VIRSPage;

	uint32	gf_VRAMPageSize;
	int32	gf_DefaultDisplayWidth;
	int32	gf_DefaultDisplayHeight;

	Timer*	gf_TimeoutTimer;

	int32	gf_Reserved5;
	int32	gf_Reserved6;
	int32	gf_Reserved7;

	VDLEntry* gf_VDLForcedFirst;
	VDLEntry* gf_VDLPreDisplay;
	VDLEntry* gf_VDLPostDisplay;
	VDLEntry* gf_VDLBlank;
	VDL*	gf_CurrentVDLEven;
	VDL*	gf_CurrentVDLOdd;
	VDLEntry* gf_VDLDisplayLink;

	int32	gf_Reserved1;
	int32	gf_Reserved3;

	Item	gf_CelSemaphore;

	int32	gf_VBLTime;		 
	int32	gf_VBLFreq;		 

	int32   gf_Reserved2;

	Stream*	gf_CurrentFontStream;
	int32   gf_FileFontCacheSize;
	int32   gf_FileFontCacheAlloc;
	ubyte*	gf_FileFontCache;
	FontEntry* gf_FontEntryHead;
	FontEntry* gf_FontEntryButt;
	List    gf_FontLRUList;
	int32   gf_FileFontFlags;
	int32   gf_FontBaseChar;
	int32   gf_FontMaxChar;
	Font*	gf_CurrentFont;
	int32   gf_CharArrayOffset;
	int32   gf_fileFontCacheUSed;

	List	gf_DisplayInfoList;

	uint32	gf_DefaultDisplayType;
	uint32	gf_DisplayTypeMask;
	VDL*	gf_BlankVDL;

	} GrafFolio;





 
 



 
 
 
 
 






































 
 
 
 
 

extern struct GrafFolio *GrafBase;
extern Item GrafFolioNum;

 










 





























 

 
 
 
















int32 AddScreenGroup( Item screenGroup, TagArg *targs );
 


Item CreateScreenGroup( Item *screenItemArray, TagArg *targs );
Err DeleteScreenGroup (Item screenGroupItem);


Err DisableHAVG( Item screenItem );
Err DisableVAVG( Item screenItem );
Err DisplayScreen( Item screenItem0, Item screenItem1 );
Err DrawCels( Item bitmapItem, CCB *ccb );
Err DrawChar( GrafCon *gcon, Item bitmapItem, uint32 character );
Err DrawScreenCels( Item screenItem, CCB *ccb );
Err DrawText16( GrafCon *gcon, Item bitmapItem, uint16 *text );
Err DrawText8( GrafCon *gcon, Item bitmapItem, uint8 *text );
Err DrawTo( Item bitmapItem, GrafCon *grafcon, Coord x, Coord y );
Err EnableHAVG( Item screenItem );
Err EnableVAVG( Item screenItem );
Err FillRect( Item bitmapItem, GrafCon *gc, Rect *r );
Font *GetCurrentFont( void );
void *GetPixelAddress( Item screenItem, Coord x, Coord y );
void MapCel( CCB *ccb, Point *quad );
void MoveTo( GrafCon *gc, Coord x, Coord y );
 
Err OpenGraphicsFolio( void );
 
Err QueryGraphics ( int32 tag, void *ret );
Err QueryGraphicsList ( TagArg *ta );
RGB888 ReadCLUTColor( uint32 index );
Color ReadPixel( Item bitmapItem, GrafCon *gc, Coord x, Coord y );
Err RemoveScreenGroup( Item screenGroup );
Err ResetCurrentFont( void );
Err ResetReadAddress( Item bitmapItem );
Err ResetScreenColors( Item screenItem );
void  SetBGPen( GrafCon *gc, Color c );
Err SetCEControl( Item bitmapItem, int32 controlWord, int32 controlMask );
Err SetCEWatchDog( Item bitmapItem, int32 db_ctr );
Err SetClipHeight( Item bitmapItem, int32 clipHeight );
Err SetClipOrigin( Item bitmapItem, int32 x, int32 y );
Err SetClipWidth( Item bitmapItem, int32 clipWidth );
Err SetCurrentFontCCB( CCB *ccb );
void SetFGPen( GrafCon *gc, Color c );
 
Err SetReadAddress( Item bitmapItem, ubyte *buffer, int32 width );
Err SetScreenColor( Item screenItem, uint32 colorEntry );
Err SetScreenColors( Item screenItem, uint32 *entries, int32 count );
Err SetVDL( Item screenItem, Item vdlItem );
Item SubmitVDL( VDLEntry *VDLDataPtr, int32 length, int32 type );
Err WritePixel( Item bitmapItem, GrafCon *gc, Coord x, Coord y );

Err ModifyVDL (Item vdlItem, TagArg* vdlTags);

DisplayInfo* GetFirstDisplayInfo (void);

Item GetVRAMIOReq (void);
Err SetVRAMPages (Item ioreq, void *dest, int32 val, int32 numpages, int32 mask);
Err CopyVRAMPages (Item ioreq, void *dest, void *src, uint32 numpages, uint32 mask);
Err CloneVRAMPages (Item ioreq, void *dest, void *src, uint32 numpages, uint32 mask);
Err SetVRAMPagesDefer (Item ioreq, void *dest, int32 val, int32 numpages, int32 mask);
Err CopyVRAMPagesDefer (Item ioreq, void *dest, void *src, uint32 numpages, uint32 mask);
Err CloneVRAMPagesDefer (Item ioreq, void *dest, void *src, uint32 numpages, uint32 mask);

Item GetVBLIOReq (void);
Err WaitVBL (Item ioreq, uint32 numfields);
Err WaitVBLDefer (Item ioreq, uint32 numfields);


 




 












void FastMapCelInit (CCB *ccb);

 













void FastMapCel (CCB *ccb, Point *quad);

 













void FastMapCelf16 (CCB *ccb, Point *quad);
















#line 39 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:hardware.h"
 

 
























































































































































































































































































































































































#line 40 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"






























































































































































































































































































































#line 41 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
 


___toplevel 






 




 




 





 










#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
 

 



 









#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 18 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdarg.h"


 










#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:varargs.h"



 






















 






___toplevel 


typedef char *va_list;

 




#line 15 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdarg.h"
#line 19 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:string.h"




































































































































































#line 20 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"


















































































































































































































































#line 21 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 22 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 23 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestream.h"
 










































































#line 26 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestreamfunctions.h"
 






















 































#line 28 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
 

 



 








#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 17 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdarg.h"


 










#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:varargs.h"










































#line 15 "Mr. Gristle:3do:Interfaces:1p3:Includes:stdarg.h"
#line 18 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:string.h"




































































































































































#line 19 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:driver.h"


















































































































































































































































#line 20 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 21 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:list.h"



























































































































































#line 22 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"


#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestream.h"
 










































































#line 25 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:filestreamfunctions.h"
 






















 































#line 27 "Mr. Gristle:3do:Interfaces:1p3:Includes:flex_stream.h"

typedef struct FlexStream
{
	Stream *flxs_FileStream;
 
	char   *flxs_Image;             
	int32   flxs_Cursor;            
	int32   flxs_Size;              
} FlexStream;





int32 CloseFlexStreamFile( FlexStream *flxs );
int32 CloseFlexStreamImage( FlexStream *flxs );
int32 OpenFlexStreamFile( FlexStream *flxs, char *filename );
int32 OpenFlexStreamImage( FlexStream *flxs, char *Image, int32 NumBytes );
int32 ReadFlexStream( FlexStream *flxs, char *Addr, int32 NumBytes );
int32 SeekFlexStream( FlexStream *flxs, int32 Offset, enum SeekOrigin Mode );
int32 TellFlexStream( FlexStream *flxs );
char *TellFlexStreamAddress( FlexStream *flxs );
char *LoadFileImage( char *Name, int32 *NumBytesPtr );






#line 30 "Mr. Gristle:3do:Interfaces:1p3:Includes:iff_fs_tools.h"

typedef struct 
{
	FlexStream iffc_FlexStream;   
	
	int32	iffc_length;
	int32   iffc_NextPos;           
	int32 (*iffc_ChunkHandler)();   
	int32 (*iffc_FormHandler)();    
	void   *iffc_UserContext;
	char   *iffc_LastChanceDir;     
	int32   iffc_Level;             
} iff_control;













 
int32 iffScanChunks ( iff_control *iffc, uint32 Length );
int32 iffParseFile (iff_control *iffc, char *FilePathName );
int32 iffParseChunk ( iff_control *iffc );
int32 iffOpenFileRead (iff_control *iffc, char *filename);
int32 iffCloseFile (iff_control *iffc);

int32 iffSkipChunkData (iff_control *iffc, uint32 numbytes);
int32 iffReadChunkData (iff_control *iffc,
			void *data, uint32 numbytes);
int32 iffReadChunkHeader (iff_control *iffc,
			uint32 *type, uint32 *size);
int32 iffReadForm (iff_control *iffc, uint32 *type);
int32 iffReadStream( iff_control *iffc, char *Addr, int32 NumBytes );
int32 iffSeekStream( iff_control *iffc, int32 Offset, enum SeekOrigin Mode );

int32 iffCloseImage (iff_control *iffc);
int32 iffOpenImage (iff_control *iffc, char *Image, int32 NumBytes );












 





 



























#line 37 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 38 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 39 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
 














___toplevel 






#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 22 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:nodes.h"







































































































































































































#line 23 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:item.h"





















































































































































#line 24 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:task.h"



























































































































































































































































#line 25 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:folio.h"



















































































































































































































































#line 26 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"

 



 







typedef int32 frac16, frac30, frac14;
typedef uint32 ufrac16, ufrac30, ufrac14;
typedef struct int64 { uint32 hi; uint32 lo; } int64, uint64, frac32, ufrac32, frac60, ufrac60;

typedef frac16 vec3f16[3], vec4f16[4], mat33f16[3][3], mat44f16[4][4], mat34f16[4][3];
typedef frac30 vec3f30[3], vec4f30[4], mat33f30[3][3], mat44f30[4][4], mat34f30[4][3];

typedef struct MathFolio {
  Folio mf;
} MathFolio;

extern MathFolio *_MathBase;


 








 




 


 


 


 


 


 


 



 


 



 





 





 





 





 


 


 


 
 


 



























 



 
typedef struct mmv3m33d {
  vec3f16 *dest;
  vec3f16 *src;
  mat33f16 *mat;
  frac16 n;
  uint32 count;
} mmv3m33d;

 
typedef struct ObjOffset1 {
  int32 oo1_DestArrayPtrOffset;
  int32 oo1_SrcArrayPtrOffset;
  int32 oo1_MatOffset;
  int32 oo1_CountOffset;
} ObjOffset1;

 
typedef struct ObjOffset2 {
  int32 oo2_DestMatOffset;
  int32 oo2_SrcMatOffset;
} ObjOffset2;





Err OpenMathFolio (void);
 
 


void Neg64 (int64 *dest, int64 *src);
void NegF32 (frac32 *dest, frac32 *src);
void NegF60 (frac60 *dest, frac60 *src);
 
 

void Not64 (int64 *dest, int64 *src);
void NotF32 (frac32 *dest, frac32 *src);
void NotF60 (frac60 *dest, frac60 *src);
 
 

ufrac16 SqrtF16 (ufrac16 x);
 

uint32 Sqrt32 (uint32 x);
 

ufrac16 DivUF16 (ufrac16 d1, ufrac16 d2);
ufrac16 DivRemUF16 (uint32 *rem, ufrac16 d1, ufrac16 d2);
 
 
 
 
 
 
 
 

frac16 DivSF16 (frac16 d1, frac16 d2);
frac16 DivRemSF16 (int32 *rem, frac16 d1, frac16 d2);
 
 
 
 
 
 
 
 
 
 

ufrac16 RecipUF16 (ufrac16 d);
 
 
 

frac16 RecipSF16 (frac16 d);
 
 
 

frac16 MulSF16 (frac16 m1, frac16 m2);
 
 

ufrac16 MulUF16 (ufrac16 m1, ufrac16 m2);
 
 

frac30 MulSF30 (frac30 m1, frac30 m2);
 
 

ufrac16 SquareSF16 (frac16 m);
 
 

ufrac16 SquareUF16 (ufrac16 m);
 
 

void MulS32_64 (int64 *prod, int32 m1, int32 m2);
void MulSF16_F32 (frac32 *prod, frac16 m1, frac16 m2);
void MulSF30_F60 (frac60 *prod, frac30 m1, frac30 m2);
 
 
 
 

void MulU32_64 (uint64 *prod, uint32 m1, uint32 m2);
void MulUF16_F32 (ufrac32 *prod, ufrac16 m1, ufrac16 m2);
void MulUF30_F60 (ufrac60 *prod, ufrac30 m1, ufrac30 m2);
 
 
 
 

void Add64 (int64 *r, int64 *a1, int64 *a2);
void AddF32 (frac32 *r, frac32 *a1, frac32 *a2);
void AddF60 (frac60 *r, frac60 *a1, frac60 *a2);
 
 
 

void Sub64 (int64 *r, int64 *s1, int64 *s2);
void SubF32 (frac32 *r, frac32 *s1, frac32 *s2);
void SubF60 (frac60 *r, frac60 *s1, frac60 *s2);
 
 
 

int32 CompareU64 (uint64 *s1, uint64 *s2);
int32 CompareUF32 (ufrac32 *s1, ufrac32 *s2);
int32 CompareUF60 (ufrac60 *s1, ufrac60 *s2);
 
 
 
 

int32 CompareS64 (int64 *s1, int64 *s2);
int32 CompareSF32 (frac32 *s1, frac32 *s2);
int32 CompareSF60 (frac60 *s1, frac60 *s2);
 
 
 
 
 
 

uint64 *DivU64 (uint64 *q, uint64 *r, uint64 *d1, uint64 *d2);
 
 

int64 *DivS64 (int64 *q, int64 *r, int64 *d1, int64 *d2);
 
 

void Mul64 (int64 *p, int64 *m1, int64 *m2);
 
 

void Square64 (uint64 *p, int64 *m);
 

uint32 Sqrt64_32 (uint64 *x);
ufrac16 SqrtF32_F16 (ufrac32 *x);
ufrac30 SqrtF60_F30 (ufrac60 *x);
 
 
 
 

 
 
 
 
 

 
 
 
 
 

uint32 DivRemU32 (uint32 *rem, uint32 d1, uint32 d2);
 
 
 

int32 DivRemS32 (int32 *rem, int32 d1, int32 d2);
 
 
 

frac16 SinF16 (frac16 x);
 
 

frac16 CosF16 (frac16 x);
 
 

frac16 Atan2F16 (frac16 x, frac16 y);
 
 
 
 

frac30 SinF30 (frac16 x);
 
 

frac30 CosF30 (frac16 x);
 
 

void SinF32 (frac32 *dest, frac16 x);
 
 

void __swi( ( ( 5 <<16) +18) ) MulManyVec3Mat33DivZ_F16 (mmv3m33d *s);
 
 

void __swi( ( ( 5 <<16) +17) )
     MulVec3Mat33DivZ_F16 (vec3f16 dest, vec3f16 vec, mat33f16 mat, frac16 n);
 
 

void __swi( ( ( 5 <<16) +0) ) MulVec3Mat33_F16 (vec3f16 dest, vec3f16 vec, mat33f16 mat);
 

void __swi( ( ( 5 <<16) +7) ) MulVec4Mat44_F16 (vec4f16 dest, vec4f16 vec, mat44f16 mat);
 

void __swi( ( ( 5 <<16) +1) ) MulMat33Mat33_F16 (mat33f16 dest, mat33f16 src1, mat33f16 src2);
 

void __swi( ( ( 5 <<16) +8) ) MulMat44Mat44_F16 (mat44f16 dest, mat44f16 src1, mat44f16 src2);
 

frac16 __swi( ( ( 5 <<16) +12) ) Dot3_F16 (vec3f16 v1, vec3f16 v2);
 

frac16 __swi( ( ( 5 <<16) +13) ) Dot4_F16 (vec4f16 v1, vec4f16 v2);
 

void __swi( ( ( 5 <<16) +14) ) Cross3_F16 (vec3f16 dest, vec3f16 v1, vec3f16 v2);
 

void Transpose33_F16 (mat33f16 dest, mat33f16 src);
 

void Transpose44_F16 (mat44f16 dest, mat44f16 src);
 

void __swi( ( ( 5 <<16) +2) ) MulManyVec3Mat33_F16
       (vec3f16 *dest, vec3f16 *src, mat33f16 mat, int32 count);
 

void __swi( ( ( 5 <<16) +9) ) MulManyVec4Mat44_F16
       (vec4f16 *dest, vec4f16 *src, mat44f16 mat, int32 count);
 

void __swi( ( ( 5 <<16) +3) ) MulObjectVec3Mat33_F16
       (void *objectlist[], ObjOffset1 *offsetstruct, int32 count);
 
 

void __swi( ( ( 5 <<16) +10) ) MulObjectVec4Mat44_F16
       (void *objectlist[], ObjOffset1 *offsetstruct, int32 count);
 
 

void __swi( ( ( 5 <<16) +4) ) MulObjectMat33_F16
       (void *objectlist[], ObjOffset2 *offsetstruct, mat33f16 mat, int32 count);
 
 

void __swi( ( ( 5 <<16) +11) ) MulObjectMat44_F16
       (void *objectlist[], ObjOffset2 *offsetstruct, mat44f16 mat, int32 count);
 
 

void __swi( ( ( 5 <<16) +5) ) MulManyF16 (frac16 *dest, frac16 *src1, frac16 *src2, int32 count);
 

void __swi( ( ( 5 <<16) +6) ) MulScalarF16 (frac16 *dest, frac16 *src, frac16 scalar, int32 count);
 

frac16 __swi( ( ( 5 <<16) +15) ) AbsVec3_F16 (vec3f16 vec);
 

frac16 __swi( ( ( 5 <<16) +16) ) AbsVec4_F16 (vec4f16 vec);
 







#line 40 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:operror.h"






























































































































































































































































































































#line 41 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:types.h"





















































































































































































































#line 42 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"


 



 
 
 

 



 


 














 











 



 





 




 
















































 


enum audio_folio_tags
{
	AF_TAG_AMPLITUDE = TAG_ITEM_LAST+1,    
	AF_TAG_RATE,
	AF_TAG_NAME,
	AF_TAG_DEVICE,
	AF_TAG_PITCH,
	AF_TAG_VELOCITY,
	AF_TAG_TEMPLATE,
	AF_TAG_INSTRUMENT,
	AF_TAG_FORMAT,
	AF_TAG_MIN,
	AF_TAG_MAX,            
	AF_TAG_DEFAULT,
	AF_TAG_WIDTH,
	AF_TAG_CHANNELS,
	AF_TAG_FRAMES,
	AF_TAG_BASENOTE,
	AF_TAG_DETUNE,
	AF_TAG_LOWNOTE,
	AF_TAG_HIGHNOTE,
	AF_TAG_LOWVELOCITY,
	AF_TAG_HIGHVELOCITY,   
	AF_TAG_SUSTAINBEGIN,
	AF_TAG_SUSTAINEND,
	AF_TAG_RELEASEBEGIN,
	AF_TAG_RELEASEEND,
	AF_TAG_NUMBYTES,
	AF_TAG_ADDRESS,
	AF_TAG_SAMPLE,
	AF_TAG_EXTERNAL,
	AF_TAG_PRIORITY,
	AF_TAG_SET_FLAGS,
	AF_TAG_CLEAR_FLAGS,
 
	AF_TAG_FREQUENCY,
	AF_TAG_ENVELOPE,
	AF_TAG_HOOKNAME,
	AF_TAG_START_AT,
 
	AF_TAG_SAMPLE_RATE,
 
	AF_TAG_COMPRESSIONRATIO,
	AF_TAG_COMPRESSIONTYPE,
	AF_TAG_NUMBITS,
 
	AF_TAG_NOTESPEROCTAVE,
	AF_TAG_BASEFREQ,
 
	AF_TAG_SUSTAINTIME,
	AF_TAG_RELEASETIME,
	AF_TAG_MICROSPERUNIT,
	AF_TAG_DATA_OFFSET,
	AF_TAG_DATA_SIZE,
 
	AF_TAG_DELAY_LINE,
 
	AF_TAG_RELEASEJUMP,
 
	AF_TAG_CURRENT,
 
	AF_TAG_STATUS,
 
	AF_TAG_TIME_SCALE,
	AF_TAG_START_TIME,
 
	AF_TAG_IMAGE_ADDRESS,
	AF_TAG_IMAGE_LENGTH,
	AF_TAG_LEAVE_IN_PLACE,
	AF_TAG_ALLOC_FUNCTION,
	AF_TAG_FREE_FUNCTION,
	AF_TAG_SCAN,
 
	AF_TAG_CLONE
};




 




 




 
enum DSPPResourceTypes     
{
	DRSC_N_MEM,
	DRSC_EI_MEM,
	DRSC_I_MEM,
	DRSC_EO_MEM,
	DRSC_RBASE4,
	DRSC_RBASE8,
	DRSC_IN_FIFO,
	DRSC_OUT_FIFO,
	DRSC_TICKS,
	DSPP_NUM_RSRC_TYPES     
};







 
 
 
















 


 


 


 


 




 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 
 
 
 





typedef uint32 AudioTime;

typedef struct DataTimePair
{
	uint32     dtpr_Time;
	int32      dtpr_Data;
} DataTimePair;

 
 
 




 
 
 



 





Err __swi( 0x40000 +0) TweakKnob( Item KnobItem, int32 Value );
Err __swi( 0x40000 +1) StartInstrument( Item Instrument, TagArg *TagList);
Err __swi( 0x40000 +2) ReleaseInstrument( Item Instrument, TagArg *TagList);
Err __swi( 0x40000 +3) StopInstrument( Item Instrument, TagArg *TagList);
Err __swi( 0x40000 +4) TuneInsTemplate( Item InsTemplate, Item Tuning );
Err __swi( 0x40000 +5) TuneInstrument( Item Instrument, Item Tuning );
Err __swi( 0x40000 +6) ReservedAudioSWI1( void );
Err __swi( 0x40000 +7) TestHack( TagArg *args );
Err __swi( 0x40000 +8) ConnectInstruments( Item SrcIns, char *SrcName,
                                             Item DstIns, char *DstName);
uint32 __swi( 0x40000 +9) TraceAudio( int32 Mask );
int32 __swi( 0x40000 +10) AllocAmplitude( int32 Amplitude);
Err __swi( 0x40000 +11) FreeAmplitude( int32 Amplitude);
Err __swi( 0x40000 +12) DisconnectInstruments( Item SrcIns, char *SrcName,
                                                 Item DstIns, char *DstName);

Err __swi( 0x40000 +13) SignalAtTime( Item Cue, AudioTime Time );
 
Err __swi( 0x40000 +15) SetAudioRate( Item Owner, frac16 Rate);
Err __swi( 0x40000 +16) SetAudioDuration( Item Owner, uint32 Frames);
 
 
Err __swi( 0x40000 +17) TweakRawKnob( Item KnobItem, int32 Value );
Err __swi( 0x40000 +18) StartAttachment( Item Attachment, TagArg *tp );
Err __swi( 0x40000 +19) ReleaseAttachment( Item Attachment, TagArg *tp );
Err __swi( 0x40000 +20) StopAttachment(  Item Attachment, TagArg *tp );
Err __swi( 0x40000 +21) LinkAttachments( Item At1, Item At2 );
Err __swi( 0x40000 +22) MonitorAttachment( Item Attachment, Item Cue, int32 CueAt );

Err __swi( 0x40000 +23) SetMasterTuning( frac16 Frequency );

 
Err __swi( 0x40000 +24) AbandonInstrument( Item Instrument );
Item __swi( 0x40000 +25) AdoptInstrument( Item InsTemplate );
Item __swi( 0x40000 +26) ScavengeInstrument( Item InsTemplate, uint8 Priority,
	int32 MaxActivity, int32 IfSystemWide );

Err __swi( 0x40000 +27) SetAudioItemInfo( Item AnyItem, TagArg *tp );

 
Err __swi( 0x40000 +28) PauseInstrument( Item Instrument );
Err __swi( 0x40000 +29) ResumeInstrument( Item Instrument );
int32 __swi( 0x40000 +30) WhereAttachment( Item Attachment );
uint32 __swi( 0x40000 +31) IncrementGlobalIndex( void );

 
Err __swi( 0x40000 +32) BendInstrumentPitch( Item Instrument, frac16 BendFrac );

 
Err __swi( 0x40000 +33) AbortTimerCue( Item Cue );

 
Err OpenAudioFolio( void );
Err CloseAudioFolio( void );

 
 
 

Err UnloadInstrument( Item Instrument );
Err UnloadInsTemplate( Item InsTemplate );
Err FreeInstrument( Item Instrument );

 
 
 
Item  GrabKnob ( Item Instrument, char *Name );
Err  ReleaseKnob ( Item KnobItem );
char *GetKnobName ( Item Instrument, int32 KnobNumber);
int32 GetNumKnobs ( Item Instrument );

 
 
 
Item   LoadSample ( char *Name );
Item   LoadSampleHere ( char *Name, void *(*CustomAllocMem)(), void (*CustomFreeMem)());
Err  DebugSample ( Item SampleItem );
Item   MakeSample ( uint32 NumBytes ,  TagArg *TagList );
Item   ScanSample ( char *Name, int32 BufferSize );
Err  UnloadSample ( Item SampleItem );

 
 
 
int32 GetCueSignal( Item Cue );
AudioTime GetAudioTime( void );
Err  SleepUntilTime(Item Cue, AudioTime Time);
Item  OwnAudioClock( void );
Err   DisownAudioClock( Item Owner );
frac16 GetAudioRate( void );
uint32 GetAudioDuration( void );

 
Err SleepAudioTicks( int32 Ticks );

 
Item  LoadInstrument( char *Name, Item AudioDevice, uint8 Priority);
Item  LoadInsTemplate( char *Name, Item AudioDevice);
Item  AllocInstrument( Item InsTemplate, uint8 Priority);

Item AttachSample( Item Instrument, Item Sample, char *FIFOName );
Err DetachSample( Item Attachment );

 
Item  FindAudioDevice( TagArg *tp );
Item  DefineInsTemplate( uint8 *Definition, int32 NumBytes, Item Device, char *Name );
Err ControlAudioDevice( Item Device, void *SendBuffer, int32 SendLen,
	void *RecvBuffer, int32 RecvLen, TagArg *tp );

int32 GetNumInstruments( Item InsTemplate );

frac16 GetMasterTuning( void );
Item  CreateTuning( ufrac16 *Frequencies, int32 NumNotes, int32 NotesPerOctave, int32 BaseNote );
Err DeleteTuning( Item Tuning );

Err GetAudioItemInfo( Item AnyItem, TagArg *tp );


 
Item  AttachEnvelope( Item Instrument, Item Envelope, char *EnvName );
Err DetachEnvelope( Item Attachment );
Item  CreateEnvelope( DataTimePair *Points, int32 Numpoints,
	int32 SustainBegin, int32 SustainEnd );
Err DeleteEnvelope( Item Envelope );


 
Item   CreateDelayLine ( int32 NumBytes , int32 NumChannels, int32 IfLoop);
Err  DeleteDelayLine( Item DelayLIne );
Item   DefineSampleHere ( uint8 *AIFFImage, int32 NumBytes, void *(*CustomAllocMem)(), void (*CustomFreeMem)());

 
Err Convert12TET_F16( int32 Semitones, int32 Cents, frac16 *FractionPtr );

 
Item CreateSample ( TagArg *Tags);
Item CreateInsTemplate ( TagArg *Tags);

 
 
int32 DSPGetTicks( void );
int32 DSPGetMaxTicks( void );
int32 DSPGetRsrcAlloc (Item Instrument, int32 RsrcType, char *Name, int32 *Alloc);
void *DSPWhereDMA ( uint32 DMAChannel );
int32 DSPReadEO(int32 EO_Offset);
int32 DSPGetInsRsrcUsed( Item Instrument, int32 RsrcType );
int32 DSPGetTotalRsrcUsed( int32 RsrcType );







#line 42 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:operamath.h"
 














___toplevel 


































































































































































































































































































































































































































































#line 43 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"

#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:form3do.h"
 
























 










































___toplevel 




#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
 

___toplevel 


 



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 73 "Mr. Gristle:3do:Interfaces:1p3:Includes:form3do.h"


	#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
 

___toplevel 


 



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 76 "Mr. Gristle:3do:Interfaces:1p3:Includes:form3do.h"










 

typedef signed char 		Int8;
typedef unsigned char		UInt8;
typedef short				Int16;
typedef unsigned short		UInt16;
typedef long				Int32;
typedef unsigned long		UInt32;



 

typedef UInt16	RGB555;





 











 















struct RGB888_Tag
	{
	unsigned char unused;
	unsigned char red;
	unsigned char green;
	unsigned char blue;
	};

typedef struct RGB888_Tag RGB;






 






 

















 

typedef struct WrapperChunk 	 
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	ubyte	data[1];			 
	} WrapperChunk;

 
typedef struct ImageCC
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 

	Int32	w;					 
	Int32	h;					 
	Int32	bytesperrow;		 
	ubyte	bitsperpixel;		 
	ubyte	numcomponents;		 
								 
								 
								 
								 
								 
								 
	ubyte	numplanes;			 
								 
								 
								 
								 
								 
	ubyte	colorspace; 		 
	ubyte	comptype;			 
								 
								 
	ubyte	hvformat;			 
	ubyte	pixelorder; 		 
								 
								 
	ubyte	version;			 
	} ImageCC;


typedef struct PixelChunk
	{
	Int32	chunk_ID;				 
	Int32	chunk_size; 			 
	ubyte	pixels[1];				 
	} PixelChunk;

 
 
 
 
 
 

 
typedef struct CCC
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	ulong	ccbversion; 		 
	ulong	ccb_Flags;			 
	struct	CCB *ccb_NextPtr;
	CelData    *ccb_CelData;
	void	   *ccb_PIPPtr; 	 

	Coord	ccb_X;
	Coord	ccb_Y;
	long	ccb_hdx;
	long	ccb_hdy;
	long	ccb_vdx;
	long	ccb_vdy;
	long	ccb_ddx;
	long	ccb_ddy;
	ulong	ccb_PPMPC;
	ulong	ccb_PRE0;			 
	ulong	ccb_PRE1;			 
	long	ccb_Width;
	long	ccb_Height;
	} CCC;


 




typedef struct LoopRec
	{
	Int32	loopStart;			 
	Int32	loopEnd;			 
	Int32	repeatCount;		 
	Int32	repeatDelay;		 
	} LoopRec;


typedef struct AnimChunk
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	Int32	version;			 
	Int32	animType;			 
	Int32	numFrames;			 
	Int32	frameRate;			 
	Int32	startFrame; 		 
	Int32	numLoops;			 
	LoopRec loop[1];			 
	} AnimChunk;


typedef struct PLUTChunk
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	Int32	numentries; 		 
	RGB555	PLUT[1];			 
	} PLUTChunk;


 
 
 
typedef struct VDL_REC
{
	UInt32	controlword;					
											
	UInt32	curLineBuffer;					
	UInt32	prevLineBuffer; 				
	UInt32	nextVDLEntry;					
	UInt32	displayControl; 				
	UInt32	CLUTEntry[ 32 ];			
	UInt32	backgroundEntry;				
	UInt32	filler1;						
	UInt32	filler2;
} VDL_REC;

typedef struct VDLCHUNK 		 
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	Int32	vdlcount;			 
	VDL_REC vdl[1]; 			 
	} VdlChunk;


typedef struct Cpyr
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	char	copyright[1];		 
	} Cpyr;


typedef struct Desc
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	char	descrip[1]; 		 
	} Desc;

typedef struct Kwrd
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	char	keywords[1];		 
	} Kwrd;

typedef struct Crdt
	{
	Int32	chunk_ID;			 
	Int32	chunk_size; 		 
	char	credits[1]; 		 
	} Crdt;

 





















#line 45 "Mr. Gristle:3do:Interfaces:1p3:Includes:Portfolio.h"





#line 3 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:Init3DO.h"
 
































___toplevel 




#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:graphics.h"
 

___toplevel 


 



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 38 "Mr. Gristle:3do:Interfaces:1p3:Includes:Init3DO.h"

 

 


typedef struct ScreenContext_TAG
	{
	int32 	sc_nScreens;
	int32 	sc_curScreen;
	int32 	sc_nFrameBufferPages;
	int32 	sc_nFrameByteCount;
	Item 	sc_Screens[ 6 ];
	Item	sc_BitmapItems[ 6 ];
	Bitmap	*sc_Bitmaps[ 6 ];
	} ScreenContext;
	
 


 

extern int NHOMES;
extern char *Home[];


	
 








extern Err  ChangeInitialDirectory(char *firstChoice, char *secondChoice, bool always);
extern bool OpenGraphics(ScreenContext *sc, int nScreens);
extern void CloseGraphics(ScreenContext *sc);
extern bool OpenMacLink( void );
extern bool OpenSPORT( void );
extern bool OpenAudio( void );
extern void ShutDown(void);







 


#line 4 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:hardware.h"
 

 
























































































































































































































































































































































































#line 5 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:mem.h"






















































































































































































































































































#line 6 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:audio.h"
 


___toplevel 




























































































































































































































































































































































































































































































































































#line 8 ":duck.C"
#line 1 "Mr. Gristle:3do:Interfaces:1p3:Includes:event.h"
 


















































 























enum EventBrokerFlavor {
  EB_NoOp               = 0,
  EB_Configure          = 1,
  EB_ConfigureReply     = 2,
  EB_EventRecord        = 3,
  EB_EventReply         = 4,
  EB_SendEvent          = 5,
  EB_SendEventReply     = 6,
  EB_Command            = 7,
  EB_CommandReply       = 8,
  EB_RegisterEvent      = 9,
  EB_RegisterEventReply = 10,
  EB_GetListeners       = 11,
  EB_GetListenersReply  = 12,
  EB_SetFocus           = 13,
  EB_SetFocusReply      = 14,
  EB_GetFocus           = 15,
  EB_GetFocusReply      = 16,
  EB_ReadPodData        = 17,
  EB_ReadPodDataReply   = 18,
  EB_WritePodData       = 19,
  EB_WritePodDataReply  = 20,
  EB_LockPod            = 21,
  EB_LockPodReply       = 22,
  EB_UnlockPod          = 23,
  EB_UnlockPodReply     = 24,
  EB_IssuePodCmd        = 25,
  EB_IssuePodCmdReply   = 26,
  EB_DescribePods       = 27,
  EB_DescribePodsReply  = 28
};



enum ListenerCategory {
  LC_NoSeeUm         = 0,
  LC_FocusListener   = 1,
  LC_Observer        = 2,
  LC_FocusUI         = 3
};

 























typedef struct EventBrokerHeader {
  enum EventBrokerFlavor ebh_Flavor;
} EventBrokerHeader;

 






typedef struct ConfigurationRequest {
  EventBrokerHeader     cr_Header;  
  enum ListenerCategory cr_Category;  
  uint32                cr_TriggerMask[8];  
  uint32                cr_CaptureMask[8];  
  int32                 cr_QueueMax;   
  uint32                rfu[8];             
} ConfigurationRequest;

 












typedef struct EventFrame {
  uint32         ef_ByteCount;          
  uint32         ef_SystemID;           
  uint32         ef_SystemTimeStamp;    
  int32          ef_Submitter;          
  uint8          ef_EventNumber;        
  uint8          ef_PodNumber;          
  uint8          ef_PodPosition;        
  uint8          ef_GenericPosition;    
  uint8          ef_Trigger;            
  uint8          rfu1[3];
  uint32         rfu2;
  uint32         ef_EventData[1];       
} EventFrame;


typedef struct EventFrameHeader {
  uint32         ef_ByteCount;          
  uint32         ef_SystemID;           
  uint32         ef_SystemTimeStamp;    
  int32          ef_Submitter;          
  uint8          ef_EventNumber;        
  uint8          ef_PodNumber;          
  uint8          ef_PodPosition;        
  uint8          ef_GenericPosition;    
  uint8          ef_Trigger;            
  uint8          rfu1[3];
  uint32         rfu2;
} EventFrameHeader;

typedef struct SendEvent {
  EventBrokerHeader  se_Header;
  EventFrame         se_FirstFrame;
} SendEvent;



 



typedef struct ControlPadEventData {
  uint32         cped_ButtonBits;   
} ControlPadEventData;

 


















typedef struct MouseEventData {
  uint32         med_ButtonBits;    
  int32          med_HorizPosition;
  int32          med_VertPosition;
} MouseEventData;






 


















typedef struct GunEventData {
  uint32         ged_ButtonBits;    
  int32          ged_HorizPosition;
  int32          ged_VertPosition;
} GunEventData;

typedef struct LightGunEventData {
  uint32         lged_ButtonBits;        
  uint32         lged_Counter;           
  uint32         lged_LinePulseCount;    
} LightGunEventData;



typedef struct CharacterEventData {
  uint32         ced_CharacterTyped;   
  uint32         ced_ModifierKeys;     
} CharacterEventData;

typedef struct KeyboardEventData {
  uint32         ked_KeyMatrix[8];
} KeyboardEventData;

typedef struct StickEventData {
  uint32         stk_ButtonBits;         
  int32          stk_HorizPosition; 
  int32          stk_VertPosition;
  int32          stk_DepthPosition;
} StickEventData;



















typedef struct IRControllerEventData {
  uint32         ir_KeyMatrix[8];       
  int32          ir_KeyCode;            
  int32          ir_GenericCode;        
  int32          ir_Model;              
} IRControllerEventData;





 



typedef struct DeviceStateEventData {
  Item            dsed_DeviceItem;
  uint32          dsed_DeviceUnit;
} DeviceStateEventData;

typedef struct FilesystemEventData {
  Item            fsed_FilesystemItem;
  char            fsed_Name[ 32 ];
} FilesystemEventData;

 


























































































 





 








typedef struct RegisterEvent {
  EventBrokerHeader     re_Header;  
  int32                 re_IsUserInterfaceEvent;
  char                  re_EventName[256];
} RegisterEvent;

 







typedef struct ListenerList {
  EventBrokerHeader     ll_Header;  
  int32                 ll_Count;
  struct {
    Item                  li_PortItem;
    enum ListenerCategory li_Category;
  } ll_Listener[1];
} ListenerList;

 









typedef struct SetFocus {
  EventBrokerHeader     sf_Header;  
  Item                  sf_DesiredFocusListener;
} SetFocus;

 































typedef struct PodData {
  EventBrokerHeader    pd_Header;
  int32                pd_PodNumber;
  int32                pd_WaitFlag;
  int32                pd_DataByteCount;
  uint8                pd_Data[4];
} PodData;

typedef struct PodDataHeader {
  EventBrokerHeader    pd_Header;
  int32                pd_PodNumber;
  int32                pd_WaitFlag;
  int32                pd_DataByteCount;
} PodDataHeader;

 









typedef struct PodDescription {
  uint8          pod_Number;
  uint8          pod_Position;
  uint8          rfu[2];
  uint32         pod_Type;
  uint32         pod_BitsIn;
  uint32         pod_BitsOut;
  uint32         pod_Flags;
  uint8          pod_GenericNumber[16];
  Item           pod_LockHolder;
} PodDescription;

typedef struct PodDescriptionList {
  EventBrokerHeader    pdl_Header;
  int32                pdl_PodCount;
  PodDescription       pdl_Pod[1];
} PodDescriptionList;


 






















 

































enum GenericPodType {
  GENERIC_ControlPad   =  0,
  GENERIC_Mouse        =  1,
  GENERIC_Gun          =  2,
  GENERIC_GlassesCtlr  =  3,
  GENERIC_AudioCtlr    =  4,
  GENERIC_Keyboard     =  5,
  GENERIC_LightGun     =  6,
  GENERIC_Stick        =  7,
  GENERIC_IRController =  8
};

typedef struct PodDescriptions {
  EventBrokerHeader   pd_Header;
  int32               pd_Pods;
  PodDescription      pd_Pod[1];
} PodDescriptions;


 




























enum POD_GenericAudioCommands {
  GENERIC_AUDIO_SetChannels    = 0
};

 









enum POD_GenericGlassesCommands {
  GENERIC_GLASSES_SetView    = 0
};

 











enum POD_KeyboardCommands {
  GENERIC_KEYBOARD_SetLEDs     = 0
};

 









enum POD_LightGunCommands {
  GENERIC_LIGHTGUN_SetLEDs      = 0
};

 











 


















 







 






 








 

































  
Err InitEventUtility (int32 numControlPads, int32 numMice,
		      int32 focusListener);

Err GetControlPad(int32 padNumber, int32 wait, ControlPadEventData *data);
Err GetMouse(int32 mouseNumber, int32 wait, MouseEventData *data);

Err KillEventUtility(void);











#line 9 ":duck.C"














static uint32
ButtonPress ()
{
    ControlPadEventData	cp;
    
    GetControlPad (1, 0, &cp);

    return (cp.cped_ButtonBits);
}

int
main (int argc, char **argv)
{
    extern ScreenContext	TheScreen;

    if (ChangeDirectory (  "$boot"  ) < 0
	    || OpenMathFolio ()
	    || OpenAudioFolio ()
	    || InitEventUtility (1L, 0L, 0L))
	goto DuckDone;
	
    TheScreen.sc_nScreens = 4;
    if (OpenGraphics (&TheScreen, 4))
    {
 	if (OpenSPORT ())
	{
	    player	plr;







	    if (playerOpen (&plr, *(argv + 1),   23  ))
	    {



		playerStart (&plr, 0);



		while (playerDo (&plr, ButtonPress () ?  0x00000040  : 0))
		    ;
		playerStop ();
		playerClose (&plr);
	    }
	}
    }
    
DuckDone:
    KillEventUtility ();
    CloseAudioFolio ();
    
    exit (0);
}


