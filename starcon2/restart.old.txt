#include "starcon.h"

enum
{
    START_NEW_GAME = 0,
    LOAD_SAVED_GAME,
    PLAY_SUPER_MELEE
};

PROC(STATIC
void near DrawRestartMenu, (OldState, NewState, f),
    ARG		(BYTE	OldState)
    ARG		(BYTE	NewState)
    ARG_END	(FRAME	f)
)
{
    RECT	r;

    SetSemaphore (&GraphicsSem);
    SetContext (ScreenContext);
    r.corner.x = r.corner.y = r.extent.width = r.extent.height = 0;
    SetContextClipRect (&r);
    r.corner.x = 0;
    r.corner.y = 0;
    r.extent.width = SCREEN_WIDTH;
    r.extent.height = SCREEN_HEIGHT;
    SetFlashRect (&r, SetAbsFrameIndex (f, NewState + 1));
    ClearSemaphore (&GraphicsSem);
}

PROC(
STATIC BOOLEAN DoRestart, (InputState, pMS),
    ARG		(INPUT_STATE	InputState)
    ARG_END	(PMENU_STATE	pMS)
)
{
    static DWORD	InTime;

    if (!pMS->Initialized)
    {
	DrawRestartMenu ((BYTE)~0, pMS->CurState, pMS->CurFrame);
	pMS->Initialized = TRUE;

	{
	    BYTE	clut_buf[] = {FadeAllToColor};
		
	    SleepTask (XFormColorMap ((COLORMAPPTR)clut_buf, ONE_SECOND / 2));
	}
    }
#ifdef TESTING
else if (InputState & DEVICE_EXIT) return (FALSE);
#endif /* TESTING */
    else if (InputState == 0)
    {
	if (GetTimeCounter () - InTime < ONE_SECOND * 15)
	    return (TRUE);

	GLOBAL (CurrentActivity) = (ACTIVITY)~0;
	return (FALSE);
    }
    else if (InputState & DEVICE_BUTTON1)
    {
	switch (pMS->CurState)
	{
	    case LOAD_SAVED_GAME:
		LastActivity &= ~CHECK_RESTART;
	    case START_NEW_GAME:
		GLOBAL (CurrentActivity) = IN_INTERPLANETARY;
		break;
	    case PLAY_SUPER_MELEE:
		GLOBAL (CurrentActivity) = SUPER_MELEE;
		break;
	}

	SetSemaphore (&GraphicsSem);	
	SetFlashRect (NULL_PTR, (FRAME)0);
	ClearSemaphore (&GraphicsSem);	

	return (FALSE);
    }
    else
    {
	BYTE	NewState;

	NewState = pMS->CurState;
	if (GetInputXComponent (InputState) < 0
		|| GetInputYComponent (InputState) < 0)
	{
	    if (NewState-- == START_NEW_GAME)
		NewState = PLAY_SUPER_MELEE;
	}
	else if (GetInputXComponent (InputState) > 0
		|| GetInputYComponent (InputState) > 0)
	{
	    if (NewState++ == PLAY_SUPER_MELEE)
		NewState = START_NEW_GAME;
	}

	if (NewState != pMS->CurState)
	{
	    DrawRestartMenu (pMS->CurState, NewState, pMS->CurFrame);
	    pMS->CurState = NewState;
	}
    }

    InTime = GetTimeCounter ();
    return (TRUE);
}

PROC(
BOOLEAN StartGame, (),
    ARG_VOID
)
{
    MENU_STATE	MenuState;

    if (GLOBAL (CurrentActivity) == (ACTIVITY)~0)
    {
TimedOut:
	GLOBAL (CurrentActivity) = 0;
	Introduction ();
    }

    MEMSET ((PMENU_STATE)&MenuState, 0, sizeof (MenuState));
    MenuState.InputFunc = DoRestart;

    {
	DWORD		TimeOut;
	BYTE		black_buf[1];
	extern ACTIVITY	NextActivity;

TryAgain:
	black_buf[0] = FadeAllToBlack;

	SetContext (ScreenContext);
	SetContextBGFrame ((FRAME)0);
	SetContextDrawState (DEST_PIXMAP | DRAW_REPLACE);

	GLOBAL (CurrentActivity) |= CHECK_ABORT;
	if (GLOBAL_SIS (CrewEnlisted) == (COUNT)~0
		&& GET_GAME_STATE (UTWIG_BOMB_ON_SHIP)
		&& !GET_GAME_STATE (UTWIG_BOMB))
	{
	    BYTE	white_buf[] = {FadeAllToWhite};

	    SET_GAME_STATE (UTWIG_BOMB_ON_SHIP, 0);

	    SleepTask (XFormColorMap ((COLORMAPPTR)white_buf, ONE_SECOND / 8) + 2);
	    SetContextBackGroundColor (BUILD_COLOR (MAKE_RGB15 (0x1F, 0x1F, 0x1F), 0x0F));
	    ClearDrawable ();
	    FlushColorXForms ();

	    TimeOut = ONE_SECOND / 8;
	}
	else
	{
	    TimeOut = ONE_SECOND / 2;
#ifdef NOTYET
GLOBAL (CurrentActivity) = WON_LAST_BATTLE | CHECK_ABORT;
#endif /* NOTYET */
	    if (LOBYTE (GLOBAL (CurrentActivity)) == WON_LAST_BATTLE)
	    {
		Victory ();
		Credits ();
		TimeOut = ONE_SECOND / 2;
		
		GLOBAL (CurrentActivity) = CHECK_ABORT;
	    }
	}

	LastActivity = CHECK_LOAD | CHECK_RESTART;
	NextActivity = 0;

	{
	    RECT	r;
	    STAMP	s;

	    s.frame = CaptureDrawable (
		    LoadGraphic (RESTART_PMAP_ANIM)
		    );
	    MenuState.CurFrame = s.frame;
	    GetFrameRect (s.frame, &r);
	    s.origin.x = (SCREEN_WIDTH - r.extent.width) >> 1;
	    s.origin.y = (SCREEN_HEIGHT - r.extent.height) >> 1;
	    SleepTask (XFormColorMap ((COLORMAPPTR)black_buf, TimeOut));
	    if (TimeOut == ONE_SECOND / 8)
		SleepTask (GetTimeCounter () + ONE_SECOND * 3);

	    SetContextBackGroundColor (BLACK_COLOR);
	    ClearDrawable ();
	    FlushColorXForms ();
	    DrawStamp (&s);

	    FlushInput ();
	    DoInput ((PVOID)&MenuState);
	    
	    SetSemaphore (&GraphicsSem);
	    SetFlashRect ((PRECT)0, (FRAME)0);
	    ClearSemaphore (&GraphicsSem);
	    DestroyDrawable (ReleaseDrawable (s.frame));
	    
	    if (GLOBAL (CurrentActivity) == (ACTIVITY)~0)
		goto TimedOut;
#ifdef TESTING
if (GLOBAL (CurrentActivity) & CHECK_ABORT)
{
    while (SoundPlaying ());
    StopSound ();

    FreeSC2Data ();
    FreeLanderData ();
    FreeIPData ();
    FreeHyperData ();
    FlushColorXForms ();
    return (FALSE);
}
#endif /* TESTING */

	    TimeOut = XFormColorMap ((COLORMAPPTR)black_buf, ONE_SECOND / 2);
	}
	
	SleepTask (TimeOut);
	FlushColorXForms ();

	SeedRandomNumbers ();

	if (LOBYTE (GLOBAL (CurrentActivity)) == SUPER_MELEE)
	{
FreeSC2Data ();
FreeLanderData ();
FreeIPData ();
FreeHyperData ();
	    Melee ();
	    MenuState.Initialized = FALSE;
	    goto TryAgain;
	}

{
extern STAR_DESC		starmap_array[];
extern PSTR			cluster_array[];
extern CONST BYTE		element_array[];
extern CONST PlanetFrame	planet_array[];
extern PSTR			*ClusterNames;

star_array = starmap_array;
ClusterNames = cluster_array;
Elements = element_array;
PlanData = planet_array;
}

	PlayerControl[0] = HUMAN_CONTROL | STANDARD_RATING | JOYSTICK_CONTROL;
	PlayerControl[1] =  COMPUTER_CONTROL | JOYSTICK_CONTROL | AWESOME_RATING;
	SetPlayerInput ();
	return (TRUE);
    }

    return (FALSE);
}

