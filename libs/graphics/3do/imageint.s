; generated by Norcroft  ARM C vsn 4.41 (Advanced RISC Machines) [Feb 17 1993]

DATA_PACKED	EQU	0x4000
X_FLIP		EQU	0x8000

PACK_LITERAL	EQU	1
PACK_TRANS	EQU	2
PACK_REPEAT	EQU	3
PACK_SHIFT	EQU	6
PACK_COUNT_MASK	EQU	0x3f

        AREA |C$$code|, CODE, READONLY
|x$codeseg|

        DCB     &61,&6d,&69,&5f
        DCB     &69,&5f,&65,&67
        DCB     &72,&65,&74,&6e
        DCB     &74,&63,&65,&73
        DCB     &00,&00,&00,&00
        DCD     &ff000014

        EXPORT  |_image_intersect|
|_image_intersect|
        MOV     ip,sp
        STMDB   sp!,{v1-v6,r10,fp,ip,lr}
	MOV	fp,ip
        LDR	v1,[a1,#&10] 		; pImageBox0->FramePtr
        LDR     r10,[v1]		; x_flip0 = pImageBox0->FramePtr flags
        MOV     r10,r10,LSR #16		; x_flip0 >>= 16
        LDR	lr,[a2,#&10] 		; pImageBox1->FramePtr
	LDR	ip,[lr] 		; x_flip1 = pImageBox1->FramePtr flags
        MOV	a4,ip,LSR #16		; x_flip1 >>= 16
	AND	ip,a4,r10
        ANDS	ip,ip,#DATA_PACKED	; x_flip0 & x_flip1 & DATA_PACKED
        MOVEQ   a1,#1
	LDMEQDB	fp,{v1-v6,r10,fp,sp,pc}	; return 1
	
	SUB	sp,sp,#&c		; grow stack
	LDMIB	a3,{v4,v5}		; pIRect->corner.y, pIRect->extent.width
	LDR	v6,[a1,#4] 		; pImageBox0->Box.corner.y
	SUB     v6,v4,v6 		; height = pIRect->corner.y - pImageBox0->Box.corner.y
        LDR	ip,[v1,#&c]		; pImageBox0->FramePtr->DataOffs
        ADD	v2,v1,ip		; lpSM0 = pImageBox0->FramePtr + pImageBox0->FramePtr->DataOffs
        B       |L000090.J7._image_intersect|
	
|L00007c.J6._image_intersect|		; while (height--)
	LDR	ip,[v2]			; lpSMO[0-3]
	MOV	ip,ip,LSR #16		; skip_bytes = MAKE_WORD (lpSM0[1], lpSM0[0])
        ADD	ip,ip,#2		; skip_bytes += 2
        ADD	v2,v2,ip,LSL #2		; lpSM0 += skip_bytes << 2
	
|L000090.J7._image_intersect|
	SUBS	v6,v6,#1		; height-- == 0? (really, --height > -1?)
	BPL     |L00007c.J6._image_intersect|	
	
        LDR     v3,[a3]			; pIRect->corner.x
        LDR	ip,[a1] 		; pImageBox0->Box.corner.x
        SUB	ip,v3,ip		; x0 = pIRect->corner.x - pImageBox0->Box.corner.x
	ANDS    r10,r10,#X_FLIP		; x_flip0 &= X_FLIP?
        BEQ     |L0000e0.J9._image_intersect|
	
        ADD	ip,ip,v5		; x0 + width
        LDR	a1,[v1,#8]		; pImageBox0->FramePtr bounds
        MOV	a1,a1,LSL #16
        MOV	a1,a1,LSR #16		; pImageBox0->FramePtr width
        SUB	ip,a1,ip		; x0 = width - (x0 + width)
	
|L0000e0.J9._image_intersect|
	STR	ip,[sp,#8]		; put x0 on stack
	LDR	v6,[a2,#4] 		; pImageBox1->Box.corner.y
	SUB     v6,v4,v6		; height = pIRect->corner.y - pImageBox1->Box.corner.y
        LDR	ip,[lr,#&c]		; pImageBox1->FramePtr->DataOffs
        ADD	v1,lr,ip		; lpSM1 = pImageBox1->FramePtr + pImageBox1->FramePtr->DataOffs
        B       |L000110.J12._image_intersect|
	
|L0000f8.J11._image_intersect|		; while (height--)
	LDR	ip,[v1]			; lpSM1[0-3]
	MOV	ip,ip,LSR #16		; skip_bytes = MAKE_WORD (lpSM1[1], lpSM1[0])
        ADD	ip,ip,#2		; skip_bytes += 2
        ADD	v1,v1,ip,LSL #2		; lpSM1 += skip_bytes << 2
	
|L000110.J12._image_intersect|
	SUBS	v6,v6,#1		; height-- == 0 (really, --height > -1)
	BPL     |L0000f8.J11._image_intersect|	
	
        LDR	a2,[a2] 		; pImageBox1->Box.corner.x
        SUB	a2,v3,a2		; x1 = pIRect->corner.x - pImageBox1->Box.corner.x
	ANDS    a4,a4,#X_FLIP		; x_flip1 &= X_FLIP
        BEQ     |L000154.J14._image_intersect|
	
        ADD     a2,a2,v5		; x1 + width
        LDR	a1,[lr,#8] 		; pImageBox1->FramePtr bounds
        MOV     a1,a1,LSL #16
        MOV     a1,a1,LSR #16		; pImageBox1->FramePtr width
	SUB	a2,a1,a2		; x1 = pImageBox1->FramePtr width - (x1 + width)
	
|L000154.J14._image_intersect|
	STR	a2,[sp,#4]		; put x1 on stack
	EOR	r10,r10,a4		; x_flip0 ^ x_flip1
	AND     r10,r10,#X_FLIP		; x_flip0 = (x_flip0 ^ x_flip1) & X_FLIP
	LDR	a1,[a3,#&c]		; height = pIRect->extent.height
	STR	a1,[sp]			; put height on stack	
		
        SUB     sp,sp,#&280		; grow stack
	
|L00016c.J16._image_intersect|		; do {...} while (--height)
	MOV	v3,#0			; num_chances = 0
        MOV     a1,v2			; lpS = lpSM0
	LDR	a2,[v2]			; lpSM0[0-3]
	MOV	a2,a2,LSR #16		; skip_bytes = MAKE_WORD (lpSM0[1], lpSM0[0])
        ADD     a2,a2,#2		; skip_bytes += 2;
        ADD     v2,v2,a2,LSL #2		; lpSM0 += skip_bytes << 2
        ADD     a1,a1,#2		; lpS += 2
	MOV	ip,#0			; dst_x = 0
        LDR     lr,[sp,#&288]		; src_x = x0
        MOV     a2,v5			; w = width
        MOV     a3,sp			; pIC = IntersectCoords
	B       |L000230.J18._image_intersect|
	
|L0001a8.J17._image_intersect|		; while (code = *lpS++)
	MOV	v4,a4,LSR #PACK_SHIFT	; pack_type = PACK_TYPE (code)
        AND     a4,a4,#PACK_COUNT_MASK	; num_pixels = PACK_COUNT (code)
        ADD     a4,a4,#1		; num_pixels += 1
	
	CMP     v4,#PACK_LITERAL	; pack_type == PACK_LITERAL?
        ADDEQ   a1,a1,a4		; lpS += num_pixels
	BEQ     |L0001d0.J19._image_intersect|
	
	CMP     v4,#PACK_REPEAT		; pack_type == PACK_REPEAT?
        ADDEQ   a1,a1,#1		; ++lpS
	
|L0001d0.J19._image_intersect|
        CMP     lr,#0			; src_x <= 0?
        BGT     |L0001e8.J24._image_intersect|	; src_x > 0
	
					; src_x <= 0
	MOVNE	lr,#0			; src_x = 0
        SUBS    a2,a2,a4		; w -= num_pixels
	
        B       |L000200.J33._image_intersect|
	
|L0001e8.J24._image_intersect|		; src_x > 0
        SUBS    lr,lr,a4		; src_x -= num_pixels
        BPL     |L000230.J18._image_intersect|	; src_x >= 0
	
						; src_x < 0
        RSB     a4,lr,#0			; num_pixels = -src_x
        SUBS    a2,a2,a4			; w -= num_pixels
	
|L000200.J33._image_intersect|		; w ?? 0
	ADDMI	a4,a4,a2		; num_pixels += w -- if w < 0
	
	CMP     v4,#PACK_TRANS		; pack_type == PACK_TRANS?
        BEQ     |L000224.J34._image_intersect|
	
        STR     ip,[a3],#4		; *pIC++ = dst_x
        SUB     v4,a4,#1		; num_pixels - 1
        ADD     v4,v4,ip		; dst_x + (num_pixels - 1)
        STR     v4,[a3],#4		; *pIC++ = dst_x + (num_pixels - 1)
        ADD     v3,v3,#1		; ++num_chances
	
|L000224.J34._image_intersect|
        CMP     a2,#0			; w <= 0?
        BLE     |L00023c.J38._image_intersect|
					; w > 0
        ADD     ip,ip,a4		; dst_x += num_pixels
	
|L000230.J18._image_intersect|
        LDRB    a4,[a1],#1		; *lpS++
        CMP     a4,#0			; *lpS == 0?
        BNE     |L0001a8.J17._image_intersect|
	
|L00023c.J38._image_intersect|
        MOV     a1,v1			; lpS = lpSM1
	LDR	a2,[v1]			; lpSM1[0-3]
	MOV	a2,a2,LSR #16		; skip_bytes = MAKE_WORD (lpSM1[1], lpSM1[0]) + 2
        ADD     a2,a2,#2		; skip_bytes += 2
        ADD     v1,v1,a2,LSL #2		; lpSM1 += skip_bytes << 2
        CMP     v3,#0			; num_chances == 0?
        BEQ     |L000378.J70._image_intersect|
	
					; num_chances != 0
        ADD     a1,a1,#2		; lpS += 2
        MOV     ip,#0			; dst_x = 0
        LDR     lr,[sp,#&284]		; src_x = x1
        MOV     a2,v5			; w = width
        MOV     a3,sp			; pIC
        CMP     r10,#0			; x_flip0 == 0?
        SUBNE   a4,v3,#1		; num_chances - 1
        ADDNE   a3,a3,a4,LSL #2		; pIC += num_chances - 1
        B       |L00036c.J46._image_intersect|
	
|L000284.J45._image_intersect|
	MOV	v4,a4,LSR #PACK_SHIFT	; pack_type = PACK_TYPE (code)
        AND     a4,a4,#PACK_COUNT_MASK	; num_pixels = PACK_COUNT (code)
        ADD     a4,a4,#1		; num_pixels += 1
		
        CMP     v4,#PACK_LITERAL	; pack_type == PACK_LITERAL?
        ADDEQ   a1,a1,a4		; lpS += num_pixels
        BEQ     |L0002ac.J47._image_intersect|
	
        CMP     v4,#PACK_REPEAT		; pack_type == PACK_REPEAT?
        ADDEQ   a1,a1,#1		; ++lpS
	
|L0002ac.J47._image_intersect|		; 
        CMP     lr,#0			; src_x == 0?
        BGT     |L0002c4.J52._image_intersect|
	
					; src_x <= 0 
	MOVNE	lr,#0			; src_x = 0
        SUBS    a2,a2,a4		; w -= num_pixels
        B       |L0002dc.J61._image_intersect|
	
|L0002c4.J52._image_intersect|
        SUBS    lr,lr,a4		; src_x -= num_pixels
        BPL     |L00036c.J46._image_intersect|	; src_x >= 0
	
					; src_x < 0
        RSB     a4,lr,#0		; num_pixels = -src_x
        SUBS    a2,a2,a4		; w -= num_pixels
	
					; w < 0
|L0002dc.J61._image_intersect|
	ADDMI	a4,a4,a2		; num_pixels += w
	
        CMP     v4,#PACK_TRANS		; pack_type == PACK_TRANS?
        BEQ     |L000360.J62._image_intersect|
	
					; pack_type != PACK_TRANS
        CMP     r10,#0			; x_flip0 == 0?
        BNE     |L000334.J76._image_intersect|
	
        B       |L000308.J67._image_intersect|
	
|L0002fc.J66._image_intersect|		; while (dst_x > pIC[1])
        SUBS    v3,v3,#1		; --num_chances
        BEQ     |L000378.J70._image_intersect|	; num_chances == 0?
	
					; num_chances != 0
        ADD     a3,a3,#8		; pIC += 2
	
|L000308.J67._image_intersect|
        LDR     v4,[a3,#4]		; pIC[1]
        CMP     v4,ip			; dst_x < pIC[1]?
        BLT     |L0002fc.J66._image_intersect|
	
					; dst_x <= pIC[1]
        ADD     v4,ip,a4		; dst_x + num_pixels
        LDR     v6,[a3]			; pIC[0]
        CMP     v4,v6			; dst_x + num_pixels > pIC[0]?
        BLE     |L000360.J62._image_intersect|
		;MOV	a1,#2		; DEBUG
        B       |L000358.J81._image_intersect|
	
|L000328.J75._image_intersect|		; x_flip0 != 0
        SUBS    v3,v3,#1		; --num_chances == 0?
        BEQ     |L000378.J70._image_intersect|
	
        SUB     a3,a3,#8		; pIC -= 2
	
|L000334.J76._image_intersect|
        LDR     v4,[a3]			; pIC[0]
        SUB     v4,v5,v4		; width - pIC[0]
        CMP     v4,ip			; dst_x >= width - pIC[0]?
        BLS     |L000328.J75._image_intersect|
	
					; dst_x < width - pIC[0]
        ADD     v6,ip,a4		; dst_x + num_pixels
        LDR     v4,[a3,#4]		; pIC[1]
        SUB     v4,v5,v4		; width - pIC[1]
        CMP     v6,v4			; dst_x + num_pixels >= width - pIC[1]?
        BCC     |L000360.J62._image_intersect|
	
		;MOV	a1,#3		; DEBUG
|L000358.J81._image_intersect|		; dst_x + num_pixels >= width - pIC[1]
        MOV     a1,#1			; take out for DEBUG
	LDMDB   fp,{v1-v6,r10,fp,sp,pc}	; return 1
		
|L000360.J62._image_intersect|
        CMP     a2,#0			; w == 0?
        BLE     |L000378.J70._image_intersect|
	
					; w > 0
        ADD     ip,ip,a4		; dst_x += num_pixels
	
|L00036c.J46._image_intersect|
        LDRB    a4,[a1],#1		; code = *lpS++
        CMP     a4,#0			; code == 0?
        BNE     |L000284.J45._image_intersect|
	
					; code == 0
|L000378.J70._image_intersect|
	LDR	a1,[sp,#&280]		; get height from stack
	SUBS	a1,a1,#1		; --height == 0?
	STRNE	a1,[sp,#&280]		; put height back on stack
        BNE     |L00016c.J16._image_intersect|
	
					; height == 0
        LDMDB   fp,{v1-v6,r10,fp,sp,pc}	; return 0

        AREA |C$$data|,DATA

|x$dataseg|

        END
